<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>shikokuchuo{net}</title>
    <link>https://shikokuchuo.net/</link>
    <atom:link href="https://shikokuchuo.net/index.xml" rel="self" type="application/rss+xml"/>
    <description>shikokuchuo.net
</description>
    <image>
      <title>shikokuchuo{net}</title>
      <url>https://shikokuchuo.net/favicon.png</url>
      <link>https://shikokuchuo.net/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Thu, 22 Jul 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Efficient R: Performant data.frame constructors</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/11-dataframes</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/11-dataframes/dataframes_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 eb5d71529ab540bc4865c181a1129e03186e0959c76196a9fbc0c2a16c767856&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="about-as.data.frame"&gt;About as.data.frame&lt;/h3&gt;
&lt;p&gt;data.frame() or as.data.frame() are such ubiquitous functions that we rarely think twice about using them to create dataframes or to convert other objects to dataframes.&lt;/p&gt;
&lt;p&gt;However, they are slow. Extremely slow.&lt;/p&gt;
&lt;p&gt;This is somewhat surprising considering how much they are used, and given that the ‘data.frame’ object is the &lt;em&gt;de facto&lt;/em&gt; standard for tabular data in R, for their constructors to be so inefficient.&lt;/p&gt;
&lt;p&gt;However this is the direct result of the presence of a lot of error checking and validation code, which is perhaps understandable for something as widely used. You simply don’t know what is going to be thrown at the function and so it needs to try to do its best or fail gracefully.&lt;/p&gt;
&lt;p&gt;Below, we demonstrate the inefficiencies of as.data.frame() versus efficient ‘data.frame’ constructors from the ‘ichimoku’ package coded for performance.&lt;/p&gt;
&lt;p&gt;For benchmarking, the ‘microbenchmark’ package will be used. It is usual to compare the median times averaged over a large number of runs, and we will use 1,000 in the cases below.&lt;/p&gt;
&lt;h3 id="matrix-conversion-benchmarking"&gt;Matrix conversion benchmarking&lt;/h3&gt;
&lt;p&gt;A 100x10 matrix of random data drawn from the normal distribution is created as the object ‘matrix’.&lt;/p&gt;
&lt;p&gt;This will be converted into a dataframe using as.data.frame() and ichimoku::matrix_df().&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)
library(microbenchmark)

matrix &amp;lt;- matrix(rnorm(1000), ncol = 10, dimnames = list(1:100, letters[1:10]))

dim(matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 100  10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;head(matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           a          b          c          d          e          f
1  1.0470296 -0.6531076  0.8278910  0.9708001 -0.1014626  1.2253514
2 -0.1436921  0.5482620  1.3607562  0.8354925  0.7415475 -0.1541012
3 -0.2369179  1.0897400 -0.8158241  0.2736871 -0.1851880 -1.0202761
4 -0.1883866 -0.4844175 -0.3421133  0.8321749  0.5960344  0.4411143
5 -0.2062340  0.9212781 -0.3687319 -0.2210680 -0.9493628  0.2689948
6 -1.2267639  0.7466243 -0.1845343  1.3502588 -1.1756389 -1.2925598
           g          h           i          j
1  1.2828614  0.4024055 -0.04694549 -1.1447872
2 -0.6869244 -0.2542681  0.48761441 -0.6505677
3 -0.5479265 -0.5446966  0.09914298  0.8869836
4 -0.4678586  0.9396598 -0.89564969  1.0552123
5 -0.6126510  0.4527644 -1.43793557  0.5074292
6  1.0173340  0.2888818  0.09522833 -0.1836863&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark(as.data.frame(matrix), matrix_df(matrix), times = 1000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
                  expr    min      lq     mean  median      uq
 as.data.frame(matrix) 31.148 32.6130 34.37202 33.2355 34.3305
     matrix_df(matrix) 14.508 15.6355 22.78279 16.0575 16.8175
      max neval
  410.675  1000
 6297.590  1000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;identical(as.data.frame(matrix), matrix_df(matrix))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;all.equal(as.data.frame(matrix), matrix_df(matrix))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As can be seen, the outputs are identical, but &lt;code&gt;ichimoku::matrix_df()&lt;/code&gt;, which is designed to be a performant ‘data.frame’ constructor, &lt;em&gt;is around twice as fast&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="xts-conversion-benchmarking"&gt;xts conversion benchmarking&lt;/h3&gt;
&lt;p&gt;The ‘xts’ format is a popular choice for large time series data as each observation is indexed by a unique valid timestamp.&lt;/p&gt;
&lt;p&gt;As an example, we use the ichimoku() function from the ‘ichimoku’ package which creates ichimoku objects inheriting the ‘xts’ class. We run ichimoku() on the sample data contained within the package to create an ‘xts’ object ‘cloud’.&lt;/p&gt;
&lt;p&gt;This will be converted into a dataframe using as.data.frame() and ichimoku::xts_df().&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)
library(microbenchmark)

cloud &amp;lt;- ichimoku(sample_ohlc_data)

xts::is.xts(cloud)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;dim(cloud)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 260  12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;print(cloud[1:6], plot = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;            open  high   low close cd tenkan kijun senkouA senkouB
2020-01-02 123.0 123.1 122.5 122.7 -1     NA    NA      NA      NA
2020-01-03 122.7 122.8 122.6 122.8  1     NA    NA      NA      NA
2020-01-05 122.8 123.4 122.4 123.3  1     NA    NA      NA      NA
2020-01-06 123.3 124.3 123.3 124.1  1     NA    NA      NA      NA
2020-01-07 124.1 124.8 124.0 124.8  1     NA    NA      NA      NA
2020-01-08 124.8 125.4 124.5 125.3  1     NA    NA      NA      NA
           chikou cloudTop cloudBase
2020-01-02  122.9       NA        NA
2020-01-03  123.0       NA        NA
2020-01-05  123.9       NA        NA
2020-01-06  123.6       NA        NA
2020-01-07  122.5       NA        NA
2020-01-08  122.6       NA        NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark(as.data.frame(cloud), xts_df(cloud), times = 1000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
                 expr     min       lq      mean   median       uq
 as.data.frame(cloud) 230.269 236.3060 252.35890 240.4095 246.1955
        xts_df(cloud)  33.862  36.9205  45.36266  38.6870  40.7065
      max neval
 6871.517  1000
 5703.421  1000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be seen that &lt;code&gt;ichimoku::xts_df()&lt;/code&gt;, which is designed to be a performant ‘data.frame’ constructor, &lt;em&gt;is over 6x as fast&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df1 &amp;lt;- as.data.frame(cloud)

is.data.frame(df1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;str(df1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;data.frame&amp;#39;:   260 obs. of  12 variables:
 $ open     : num  123 123 123 123 124 ...
 $ high     : num  123 123 123 124 125 ...
 $ low      : num  122 123 122 123 124 ...
 $ close    : num  123 123 123 124 125 ...
 $ cd       : num  -1 1 1 1 1 1 -1 0 -1 -1 ...
 $ tenkan   : num  NA NA NA NA NA ...
 $ kijun    : num  NA NA NA NA NA NA NA NA NA NA ...
 $ senkouA  : num  NA NA NA NA NA NA NA NA NA NA ...
 $ senkouB  : num  NA NA NA NA NA NA NA NA NA NA ...
 $ chikou   : num  123 123 124 124 122 ...
 $ cloudTop : num  NA NA NA NA NA NA NA NA NA NA ...
 $ cloudBase: num  NA NA NA NA NA NA NA NA NA NA ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;df2 &amp;lt;- xts_df(cloud)

is.data.frame(df2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;str(df2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;data.frame&amp;#39;:   260 obs. of  13 variables:
 $ index    : POSIXct, format: &amp;quot;2020-01-02 00:00:00&amp;quot; ...
 $ open     : num  123 123 123 123 124 ...
 $ high     : num  123 123 123 124 125 ...
 $ low      : num  122 123 122 123 124 ...
 $ close    : num  123 123 123 124 125 ...
 $ cd       : num  -1 1 1 1 1 1 -1 0 -1 -1 ...
 $ tenkan   : num  NA NA NA NA NA ...
 $ kijun    : num  NA NA NA NA NA NA NA NA NA NA ...
 $ senkouA  : num  NA NA NA NA NA NA NA NA NA NA ...
 $ senkouB  : num  NA NA NA NA NA NA NA NA NA NA ...
 $ chikou   : num  123 123 124 124 122 ...
 $ cloudTop : num  NA NA NA NA NA NA NA NA NA NA ...
 $ cloudBase: num  NA NA NA NA NA NA NA NA NA NA ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The outputs are slightly different as xts_df() preserves the date-time index of ‘xts’ objects as a new first column ‘index’ which is POSIXct in format. The default as.data.frame() constructor converts the index into the row names, which is not desirable as the dates are coerced to type ‘character’.&lt;/p&gt;
&lt;p&gt;So it can be seen that in this case, not only is the performant constructor faster, it is also more fit for purpose.&lt;/p&gt;
&lt;h3 id="when-to-use-performant-constructors"&gt;When to use performant constructors&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;strong&gt;Data which is not already a ‘data.frame’ object being plotted using ‘ggplot2’.&lt;/strong&gt; For example if you have time series data in the ‘xts’ format, calling a ‘ggplot2’ plot method automatically converts the data into a dataframe as ggplot() only works with dataframes internally. Fortunately it does not use as.data.frame() but its own constructor ggplot2::fortify(). Benchmarked below, it is slightly faster than as.data.frame() but the performant constructor &lt;code&gt;ichimoku::xts_df()&lt;/code&gt; &lt;em&gt;is still almost 4x as fast&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark(as.data.frame(cloud), ggplot2::fortify(cloud), xts_df(cloud), times = 1000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
                    expr     min       lq      mean   median       uq
    as.data.frame(cloud) 231.683 240.5755 260.94003 246.4725 253.3840
 ggplot2::fortify(cloud) 132.811 145.2860 170.82074 153.1985 162.7935
           xts_df(cloud)  34.382  38.1695  41.71392  40.5490  42.7240
      max neval
 5246.692  1000
 4828.824  1000
  381.869  1000&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;In a context where performance is critical.&lt;/strong&gt; This is usually in interactive environments such as a Shiny app, perhaps with real time data where slow code can reduce responsiveness or cause bottlenecks in execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Within packages.&lt;/strong&gt; It is usually safe to use performant constructors within functions or for internal unexported functions. If following programming best practices the input and output types for functions are kept consistent, and so the input to the constructor can be controlled and hence its function predictable. Setting appropriate unit tests can also catch any issues early.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="when-to-question-the-use-of-performant-constructors"&gt;When to question the use of performant constructors&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For user-facing functions.&lt;/strong&gt; Having no validation or error-checking code means that a performant constructor may behave unpredictably on data that is not intended to be an input. Within a function, there is a specific or at most finite range of objects that a constructor can receive. When that limit is removed, if the input is not the intended input for a constructor then an error can be expected. As long as this is made clear to the user and there are adequate instructions on proper usage, in an environment where the occasional error message is acceptable, then proceed to use the performant constructor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When the constructor needs to handle a range of input types.&lt;/strong&gt; as.data.frame() is actually an S3 generic with a variety of methods for different object classes. If required to handle a variety of different types of input, it may be easier (if not more performant) to rely on as.data.frame() rather than write code which handles different scenarios.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="what-is-a-performant-constructor"&gt;What is a performant constructor&lt;/h3&gt;
&lt;p&gt;First of all, it is possible to directly use the functions matrix_df() and xts_df() which are exported from the ‘ichimoku’ package. Given the nature of the R ecosystem, this is indeed encouraged.&lt;/p&gt;
&lt;p&gt;However, having seen the advantages of using a performant constructor above, we can now turn to the ‘what’ for the curious.&lt;/p&gt;
&lt;p&gt;What lies behind those functions? Some variation of the below:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# structure() is used to set the &amp;#39;class&amp;#39; and other attributes on an object
structure(list(vec1, vec2, vec3),
          class = &amp;quot;data.frame&amp;quot;,
          row.names = seq_len(length(vec1)))&lt;/code&gt;&lt;/pre&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;A data.frame is simply a list (where each element must be the same length).&lt;/li&gt;
&lt;li&gt;It has an attribute ‘class’ which equals ‘data.frame’.&lt;/li&gt;
&lt;li&gt;It must have row names, which is usually just an integer sequence.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;The vectors in the list (vec1, vec2, vec3, etc.) must be the same length, othwerwise a corrupt data.frame warning will be generated.&lt;/li&gt;
&lt;li&gt;If row names are missing then the data will still be present but dim() will show a 0-row dataframe and its print method will not work.&lt;/li&gt;
&lt;li&gt;Row names are not limited to an integer sequence. They can be dates for example. However if dates are set as row names, they are first coerced to type ‘character’.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In conclusion, dataframes are not complicated structures but essentially lists with a couple of constraints. Indeed you can see that the underlying data type of a dataframe is just a list:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;class(df1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;typeof(df1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;class(df2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;typeof(df2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;p&gt;ichimoku R package site: &lt;a href="https://shikokuchuo.net/ichimoku/" class="uri"&gt;https://shikokuchuo.net/ichimoku/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ichimoku CRAN page: &lt;a href="https://CRAN.R-project.org/package=ichimoku" class="uri"&gt;https://CRAN.R-project.org/package=ichimoku&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">66104a4aab6f3bc9584bed85b41b1412</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/11-dataframes</guid>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/11-dataframes/dataframes_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Efficient R: Combinations using expand.grid</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/10-combinations</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/10-combinations/combinations_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 96e41b3b0fa827b7c9c1f4a7765667064026f9448a78327415264112f7f54dbe&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;
&lt;p&gt;It seems that there is no base R function to generate exhaustive combinations of two identical vectors, sometimes desired as function inputs to mapply/vapply(). The combn() function from the ‘utils’ package is required.&lt;/p&gt;
&lt;p&gt;utils::combn() outputs the unique set of combinations, so for the example below where the first 8 letters of the alphabet are used, the combination {a, b} appears, but {b, a} does not. Similarly the cases where the two elements are identical such as {a, a} also do not feature. It can be seen that there are 28 (or 8 choose 2) unique combinations for the vector of length 8.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x &amp;lt;- letters[1:8]
xlen &amp;lt;- length(x)

combn &amp;lt;- utils::combn(x, 2)
combn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="expand.grid"&gt;expand.grid&lt;/h3&gt;
&lt;p&gt;expand.grid() from the base package is a useful function in its own right, most well-known perhaps for its use in generating hyperparameter tuning grids in machine learning models.&lt;/p&gt;
&lt;p&gt;expand.grid() produces a data frame in columns rather than a matrix in rows like utils::combn(). Hence just for demonstration purposes to compare like-for-like, a bit of manipulation is done below to make the output exactly the same. In real world usage the output of expand.grid() can be used ‘as is’ without the additional manipulation.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;grid &amp;lt;- expand.grid(x, x, KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
grid &amp;lt;- t(as.matrix(grid))
grid &amp;lt;- rbind(grid[2,], grid[1,])
rownames(grid) &amp;lt;- NULL
grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,] &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;  
[2,] &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;  
     [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52]
[1,] &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
     [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]
[1,] &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;  
     [,63] [,64]
[1,] &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be seen that the output of expand.grid() is simply all combinations, of which there are 8^2 = 64 in total.&lt;/p&gt;
&lt;h3 id="ichimokugrid_dup"&gt;ichimoku::grid_dup&lt;/h3&gt;
&lt;p&gt;So how to get from the output of expand.grid() to that of utils::combn()? Well, with the help of a simple algorithm, which has been coded into the grid_dup() function from the ‘ichimoku’ package, expressly for this purpose.&lt;/p&gt;
&lt;p&gt;From the function documentation: ‘create a vector of element positions of duplicates in the output of expand.grid on 2 identical vectors’.&lt;/p&gt;
&lt;p&gt;Using the function as per the below, ‘grid1’ contains all unique combinations and also those where the two elements are identical. This is sometimes the desired output if two of the same elements is still considered a unique combination, and simply that the order of appearance does not matter.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)

grid1 &amp;lt;- grid[, -grid_dup(xlen)]
grid1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,] &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,33] [,34] [,35] [,36]
[1,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the ‘omit.id = TRUE’ argument is set for grid_dup(), identical elements are also removed. ‘grid2’ should then be the same as ‘combn’ obtained above.&lt;/p&gt;
&lt;p&gt;Indeed it can be seen that both identical() and all.equal() below return TRUE.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;grid2 &amp;lt;- grid[, -grid_dup(xlen, omit.id = TRUE)]
grid2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;identical(combn, grid2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;all.equal(combn, grid2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="benchmarking-the-results"&gt;Benchmarking the results&lt;/h3&gt;
&lt;p&gt;‘Microbenchmark’ can be used to benchmark the performance, where it is usual practice to compare median values.&lt;/p&gt;
&lt;p&gt;For small vector lengths, expand.grid() is not as performant. This is somewhat to be expected given the overhead of working with data frames rather than matrices. However the absolute times are also small so any difference would not matter as much.&lt;/p&gt;
&lt;p&gt;When the vector length reaches 16, the custom algorithm using expand.grid()/grid_dup() starts to outperform.&lt;/p&gt;
&lt;p&gt;By the time the vector length reaches 1,000, this implies total unique combinations of 499,500 and the custom algorithm is already c. 7x faster.&lt;/p&gt;
&lt;p&gt;It should be noted that the custom algorithm is tailored for the special case of combn(x, m) where m = 2 and that is most likely why there can be such an outperformance.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;fn_combn &amp;lt;- function(x) {
  utils::combn(x, 2)
}

fn_grid &amp;lt;- function(x) {
  expand.grid(x, x, KEEP.OUT.ATTRS = FALSE,
              stringsAsFactors = FALSE)[-grid_dup(length(x), omit.id = TRUE), ]
}

microbenchmark::microbenchmark(fn_combn(1:16), fn_grid(1:16))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
           expr    min      lq     mean  median     uq     max neval
 fn_combn(1:16) 54.810 56.7125 59.82358 58.1330 60.531 114.806   100
  fn_grid(1:16) 52.632 55.2260 59.27020 57.1955 59.446 174.222   100&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark::microbenchmark(fn_combn(1:1000), fn_grid(1:1000))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: milliseconds
             expr       min        lq     mean    median        uq
 fn_combn(1:1000) 218.43646 281.64872 285.2724 284.55863 287.79945
  fn_grid(1:1000)  27.80359  38.90674  50.0806  41.79677  45.14565
      max neval
 356.6259   100
 123.9727   100&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="use-case-mapply-and-vapply"&gt;Use case: mapply() and vapply()&lt;/h3&gt;
&lt;p&gt;This type of output is suitable for feeding into functions such as mapply() or vapply().&lt;/p&gt;
&lt;p&gt;A standard use for mapply is when multiple arguments have to be mapped into a function. Here ‘simplify = FALSE’ is set to have mapply return a list, and fed into do.call() with c() to create a vector. This is a safer and more performant method to create a vector than relying on the built-in simplification.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;do.call(c, mapply(function(x, y) paste0(x, &amp;quot;&amp;amp;&amp;quot;, y), 
                  grid2[1, ], grid2[2, ],
                  SIMPLIFY = FALSE, USE.NAMES = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] &amp;quot;a&amp;amp;b&amp;quot; &amp;quot;a&amp;amp;c&amp;quot; &amp;quot;a&amp;amp;d&amp;quot; &amp;quot;a&amp;amp;e&amp;quot; &amp;quot;a&amp;amp;f&amp;quot; &amp;quot;a&amp;amp;g&amp;quot; &amp;quot;a&amp;amp;h&amp;quot; &amp;quot;b&amp;amp;c&amp;quot; &amp;quot;b&amp;amp;d&amp;quot; &amp;quot;b&amp;amp;e&amp;quot; &amp;quot;b&amp;amp;f&amp;quot;
[12] &amp;quot;b&amp;amp;g&amp;quot; &amp;quot;b&amp;amp;h&amp;quot; &amp;quot;c&amp;amp;d&amp;quot; &amp;quot;c&amp;amp;e&amp;quot; &amp;quot;c&amp;amp;f&amp;quot; &amp;quot;c&amp;amp;g&amp;quot; &amp;quot;c&amp;amp;h&amp;quot; &amp;quot;d&amp;amp;e&amp;quot; &amp;quot;d&amp;amp;f&amp;quot; &amp;quot;d&amp;amp;g&amp;quot; &amp;quot;d&amp;amp;h&amp;quot;
[23] &amp;quot;e&amp;amp;f&amp;quot; &amp;quot;e&amp;amp;g&amp;quot; &amp;quot;e&amp;amp;h&amp;quot; &amp;quot;f&amp;amp;g&amp;quot; &amp;quot;f&amp;amp;h&amp;quot; &amp;quot;g&amp;amp;h&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An equivalent example using vapply() is given below. vapply() is also a safe choice for programming as an output template is explicitly specified, here ‘character(1L)’, hence the returned values are all expected to be of type ‘character’ of length ‘1’ otherwise an error is thrown.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;vapply(seq_along(grid2[1L, ]),
       function(i) paste0(grid2[1L, i], &amp;quot;&amp;amp;&amp;quot;, grid2[2L, i]),
       character(1L), USE.NAMES = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] &amp;quot;a&amp;amp;b&amp;quot; &amp;quot;a&amp;amp;c&amp;quot; &amp;quot;a&amp;amp;d&amp;quot; &amp;quot;a&amp;amp;e&amp;quot; &amp;quot;a&amp;amp;f&amp;quot; &amp;quot;a&amp;amp;g&amp;quot; &amp;quot;a&amp;amp;h&amp;quot; &amp;quot;b&amp;amp;c&amp;quot; &amp;quot;b&amp;amp;d&amp;quot; &amp;quot;b&amp;amp;e&amp;quot; &amp;quot;b&amp;amp;f&amp;quot;
[12] &amp;quot;b&amp;amp;g&amp;quot; &amp;quot;b&amp;amp;h&amp;quot; &amp;quot;c&amp;amp;d&amp;quot; &amp;quot;c&amp;amp;e&amp;quot; &amp;quot;c&amp;amp;f&amp;quot; &amp;quot;c&amp;amp;g&amp;quot; &amp;quot;c&amp;amp;h&amp;quot; &amp;quot;d&amp;amp;e&amp;quot; &amp;quot;d&amp;amp;f&amp;quot; &amp;quot;d&amp;amp;g&amp;quot; &amp;quot;d&amp;amp;h&amp;quot;
[23] &amp;quot;e&amp;amp;f&amp;quot; &amp;quot;e&amp;amp;g&amp;quot; &amp;quot;e&amp;amp;h&amp;quot; &amp;quot;f&amp;amp;g&amp;quot; &amp;quot;f&amp;amp;h&amp;quot; &amp;quot;g&amp;amp;h&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of the two however, mapply() is marginally faster and should normally be used when iteration is required over multiple arguments.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">3482590168b4ecbec0d448d8534dcd47</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/10-combinations</guid>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/10-combinations/combinations_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Efficient R: do.call / lapply</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/09-docall-lapply</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/09-docall-lapply/docall-lapply_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 2074954df14cc65b017b3e9d4b291353151672d450f2b623acc2a5d253767e42&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="use-case"&gt;Use case&lt;/h3&gt;
&lt;p&gt;The use of the do.call / lapply() combination is a powerful way to leverage functional programming in R. In short, you write a function that performs some actions and apply it to a list of inputs, which can then be fed into a function that combines everything into a single object.&lt;/p&gt;
&lt;p&gt;Let us take an example, where we would like to calculate the ichimoku clouds for a selection of the major world stock indices, but also preserve the volume data, all in one tidy object.&lt;/p&gt;
&lt;p&gt;We use the ‘ichimoku’ package which not only draws the ichimoku clouds, but also provides an interface to the OANDA fxTrade API which is a rich source of high-quality financial data (free but requires registration).&lt;/p&gt;
&lt;h3 id="setup"&gt;Setup&lt;/h3&gt;
&lt;p&gt;We could set it up as per the below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tickers: a vector defining the stock symbols in our portfolio&lt;/li&gt;
&lt;li&gt;process(): a function that generates a row in a data frame or matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)

tickers &amp;lt;- c(&amp;quot;DE30_EUR&amp;quot;, &amp;quot;JP225_USD&amp;quot;, &amp;quot;SPX500_USD&amp;quot;, &amp;quot;UK100_GBP&amp;quot;)

process &amp;lt;- function(x, from, to) {
  # Use ichimoku::oanda() to retrieve data from the OANDA fxTrade API
  pxdata &amp;lt;- oanda(x, from = from, to = to)
  # Extract volume column
  volume &amp;lt;- pxdata$volume
  # Calculate the cloud by calling ichimoku::ichimoku()
  cloud &amp;lt;- ichimoku(pxdata, ticker = x)
  # Return a list of ticker, ichimoku cloud object, volume data
  list(x, cloud, volume)
}&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Note: the original pricing data is preserved within the ichimoku object.
&lt;/aside&gt;
&lt;p&gt;We now want to apply our function to each element of ‘tickers’ in turn, and then for the results to be combined.&lt;/p&gt;
&lt;h3 id="loop"&gt;Loop&lt;/h3&gt;
&lt;p&gt;One way to achieve this would be to iterate over ‘tickers’ using a loop:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Define a list to contain the loop output, specifying the length in advance as good practice
portfolio &amp;lt;- vector(mode = &amp;quot;list&amp;quot;, length = length(tickers))

# Loop over each element in &amp;#39;tickers&amp;#39; and save in pre-defined list
for (i in seq_along(tickers)) {
  portfolio[[i]] &amp;lt;- process(tickers[i], from = &amp;quot;2015-09-03&amp;quot;, to = &amp;quot;2016-06-30&amp;quot;)
}

# Create output matrix by calling rbind on each element of the list
portfolio &amp;lt;- do.call(rbind, portfolio)

portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]         [,2]          [,3]       
[1,] &amp;quot;DE30_EUR&amp;quot;   ichimoku,2820 integer,209
[2,] &amp;quot;JP225_USD&amp;quot;  ichimoku,2868 integer,213
[3,] &amp;quot;SPX500_USD&amp;quot; ichimoku,2868 integer,213
[4,] &amp;quot;UK100_GBP&amp;quot;  ichimoku,2820 integer,209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach takes 3-4 lines of code.&lt;/p&gt;
&lt;p&gt;Furthermore, ‘i’ remains as a leftover object in the global environment.&lt;/p&gt;
&lt;p&gt;Somewhat messy.&lt;/p&gt;
&lt;h3 id="do.call-lapply"&gt;do.call / lapply&lt;/h3&gt;
&lt;p&gt;Instead we can use a do.call / lapply() combination to achieve the same result in one line:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;portfolio &amp;lt;- do.call(rbind, lapply(tickers, process, from = &amp;quot;2015-09-03&amp;quot;, to = &amp;quot;2016-06-30&amp;quot;))

portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]         [,2]          [,3]       
[1,] &amp;quot;DE30_EUR&amp;quot;   ichimoku,2820 integer,209
[2,] &amp;quot;JP225_USD&amp;quot;  ichimoku,2868 integer,213
[3,] &amp;quot;SPX500_USD&amp;quot; ichimoku,2868 integer,213
[4,] &amp;quot;UK100_GBP&amp;quot;  ichimoku,2820 integer,209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are also no intermediate objects generated that clutter the global environment.&lt;/p&gt;
&lt;p&gt;To explain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First lapply() applies to a list or list-like object (‘tickers’), a function (‘process’). The arguments to the function are supplied immediately afterwards. lapply always returns a list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This can then be fed into do.call(), which calls a function (‘rbind’) on a list of arguments (the output of ‘lapply’, which is a list). This creates a matrix.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The use of do.call / lapply() provides for a far more succinct and distinctive coding style.&lt;/p&gt;
&lt;p&gt;The added bonus is that of the ‘apply’ family of functions, lapply() is almost always the fastest and most performant as the output type is fixed and it does not try to do things with names or simplify the output structure.&lt;/p&gt;
&lt;p&gt;For a more structured format rather than a list, lapply() can be fed into a do.call() with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c() to form a vector&lt;/li&gt;
&lt;li&gt;cbind() or rbind() to form a matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The use of this type of combination is of particular benefit in programming where both performance and predictability of output types is paramount.&lt;/p&gt;
&lt;h3 id="tidy-data-output"&gt;Tidy data output&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]         [,2]          [,3]       
[1,] &amp;quot;DE30_EUR&amp;quot;   ichimoku,2820 integer,209
[2,] &amp;quot;JP225_USD&amp;quot;  ichimoku,2868 integer,213
[3,] &amp;quot;SPX500_USD&amp;quot; ichimoku,2868 integer,213
[4,] &amp;quot;UK100_GBP&amp;quot;  ichimoku,2820 integer,209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‘portfolio’ is a tidy matrix with a row for each ticker, and a column for each data type.&lt;/p&gt;
&lt;p&gt;We can easily access any element of the matrix by specifying its index value, for example the ichimoku object for the S&amp;amp;P 500 Index by [3,2]. In the example below we run autostrat() on this object:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;autostrat(portfolio[3, 2][[1]], n = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                       [,1]               
Strategy               &amp;quot;cloudTop &amp;gt; kijun&amp;quot; 
---------------------  &amp;quot;----------&amp;quot;       
Strategy cuml return % 6.48               
Per period mean ret %  0.0468             
Periods in market      74                 
Total trades           3                  
Average trade length   24.67              
Trade success %        100                
Worst trade ret %      0.61               
---------------------  &amp;quot;----------&amp;quot;       
Benchmark cuml ret %   2.67               
Per period mean ret %  0.0196             
Periods in market      134                
---------------------  &amp;quot;----------&amp;quot;       
Direction              &amp;quot;long&amp;quot;             
Start                  2015-12-22 22:00:00
End                    2016-06-29 21:00:00
Ticker                 &amp;quot;SPX500_USD&amp;quot;       &lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Note: Each element of the matrix is wrapped as a list so that they are of equal length. To access the underlying object, the ichimoku object in this case, we simply extract it using [[1]].
&lt;/aside&gt;
&lt;p&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Further examples: Youngju Nielsen of Sungkyunkwan University uses do.call / lapply to good effect in her course &lt;a href="https://www.coursera.org/learn/the-fundamental-of-data-driven-investment/" class="uri"&gt;https://www.coursera.org/learn/the-fundamental-of-data-driven-investment/&lt;/a&gt;&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">5a539cf9f73b4d355bbed7a9fb4878d1</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/09-docall-lapply</guid>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/09-docall-lapply/docall-lapply_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>ichimoku</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/08-ichimoku</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 9b787ca60956d571ad9686d55815fcff38fce9d550ccb1310c0b9c11dfa8069e&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;p&gt;An implementation in R of the Ichimoku Kinkō Hyō (一目均衡表) charting system, also commonly known as ‘cloud charts’.&lt;/p&gt;
&lt;p&gt;The technique is a refinement on candlestick charting originating from Japan, now in widespread use in technical analysis worldwide. Translating to ‘one-glance equilibrium chart’, it allows the price action and market structure of financial securities to be determined ‘at-a-glance’.&lt;/p&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;For publication-ready charts simply ichimoku() and plot():&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)
TKR &amp;lt;- sample_ohlc_data

cloud &amp;lt;- ichimoku(TKR)

plot(cloud, window = &amp;quot;2020-04/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(cloud, window = &amp;quot;2020-04/&amp;quot;, theme = &amp;quot;dark&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-2.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(cloud, window = &amp;quot;2020-04/&amp;quot;, theme = &amp;quot;solarized&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-3.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(cloud, window = &amp;quot;2020-04/&amp;quot;, theme = &amp;quot;mono&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-4.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;For fully-interactive charts for analysis simply iplot():&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;iplot(cloud, window = &amp;quot;2020-04/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install the released version of ichimoku from CRAN:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;ichimoku&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or install the development version of ichimoku from GitHub with:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;devtools::install_github(&amp;quot;shikokuchuo/ichimoku&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="package-site"&gt;Package site&lt;/h3&gt;
&lt;p&gt;Hosted ourselves at: &lt;a href="https://shikokuchuo.net/ichimoku/" class="uri"&gt;https://shikokuchuo.net/ichimoku/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ichimoku-kinko-hyo"&gt;Ichimoku Kinko Hyo&lt;/h3&gt;
&lt;p&gt;The system consists of the following chart lines added to a candlestick chart:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tenkan-sen&lt;/strong&gt; (転換線): [conversion line] the mid-point of the highest high and lowest low for the past 9 periods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kijun-sen&lt;/strong&gt; (基準線): [base line] the mid-point of the highest high and lowest low for the past 26 periods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Senkou span A&lt;/strong&gt; (先行帶A): [leading span A] the mid-point of Tenkan-sen and Kijun-sen plotted ahead 26 periods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Senkou span B&lt;/strong&gt; (先行帶B): [leading span B] the mid-point of the highest high and lowest low for the past 52 periods, plotted ahead 26 periods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chikou span&lt;/strong&gt; (遲行帶): [lagging span] the current closing price plotted 26 periods behind.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;kumo&lt;/strong&gt; (雲) [cloud] is the area between Senkou span A and Senkou span B (usually shaded on a chart).&lt;/p&gt;
&lt;h3 id="interpretation"&gt;Interpretation&lt;/h3&gt;
&lt;p&gt;Ichimoku Kinkō Hyō can be translated as ‘one-glance equilibrium chart’. It is designed to allow the price action and market structure of financial securities to be determined ‘at-a-glance’ in a highly visual fashion.&lt;/p&gt;
&lt;p&gt;For example in a strongly upwards-trending market, the candlesticks will be above the Tenkan-sen, which will be above the Kijun-sen, which will be above the cloud, and the Chikou span may not have anything above it.&lt;/p&gt;
&lt;p&gt;The lines and the cloud represent dynamic support and resistance zones relative to the price candles. Generally the thicker the cloud, the tougher the support/resistance. In our previous example, if the price now reverts downwards, it can expect support first at the Kijun-sen, then the Tenkan-sen and finally the cloud itself.&lt;/p&gt;
&lt;p&gt;More subtle interpretations involve the Chikou span in particular and its action in relation to the cloud lines as well as the candles.&lt;/p&gt;
&lt;h3 id="context"&gt;Context&lt;/h3&gt;
&lt;p&gt;Ichimoku analysis is the latest refinement in candlestick charting techniques, which also originated from Japan back in the 18th century. Actually developed during the mid-20th century, it gained popularity especially from the late 1990s onward, and is now used on trading floors worldwide.&lt;/p&gt;
&lt;p&gt;The time periods have traditionally been calculated as 9, 26 and 52 based on manual data analysis performed in Japan in a pre-computer age where there was a 6-day working week resulting in 26 average trading days in a month. Although this bears little relevance to the current day, the use of these time periods has persisted as an ‘industry norm’ or ‘accepted practice’.&lt;/p&gt;
&lt;p&gt;To use other periods would be meaningless in a sense as everyone uses these parameters and ‘market psychology’ can and often does create its own realities, independent of any fundamentals. However, there is no reason for the technique not to evolve, and to reflect changing trading realities perhaps other parameters will become more relevant in the collective psychology.&lt;/p&gt;
&lt;p&gt;Finally, the use originated with daily candlesticks, and the most valid interpretation remains for daily data. However, it is equally used today for both shorter intra-day, e.g. 4-hour or hourly, and longer, e.g. weekly or monthly, charts.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">b3f7145e73b6854dc8553ba19fc5a4b3</distill:md5>
      <category>R</category>
      <category>Quantitative Finance</category>
      <guid>https://shikokuchuo.net/posts/08-ichimoku</guid>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Distill for R Markdown</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/04-distill</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/04-distill/distill_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 db79682f8bee39d7ed9231200fd076ebed92a4471a9f3ce611d0a5a28bb984a3&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="created-using-distill"&gt;Created using Distill&lt;/h3&gt;
&lt;p&gt;This website was created using &lt;a href="https://pkgs.rstudio.com/distill/"&gt;Distill&lt;/a&gt; for R Markdown, a web publishing format optimised for scientific and technical communication.&lt;/p&gt;
&lt;h3 id="key-advantages"&gt;Key advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R markdown to run R code (and all the possibility that brings)&lt;/li&gt;
&lt;li&gt;Use markdown / html interchangeably&lt;/li&gt;
&lt;li&gt;No dependency on Hugo or Jekyll, so no lock-in or need to maintain those stacks&lt;/li&gt;
&lt;li&gt;Out-of-the-box support for mobile&lt;/li&gt;
&lt;li&gt;Clean and attractive defaults&lt;/li&gt;
&lt;li&gt;Mainly “just works”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install release version of Distill from CRAN:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;distill&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="distill-blog-hosted-on-github-pages-step-by-step-instructions"&gt;Distill blog hosted on Github Pages step-by-step instructions&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Create a new blog at /blog of your current working directory in R:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;distill::create_blog(dir = &amp;quot;blog&amp;quot;, title = &amp;quot;My New Blog&amp;quot;, gh_pages = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Make some inital changes to _site.yml. Select the ‘build’ tab in RStudio and hit ‘Build Website’. This will generate the website. &lt;br /&gt;&lt;br /&gt; &lt;strong&gt;Note: building the website does not generate blog posts.&lt;/strong&gt; Each time the website is re-built, only the .Rmd files in the base directory will be automatically re-generated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modify the yaml front matter and content of the example blog post. Then hit ‘Knit’ in RStudio to generate the post. &lt;br /&gt;&lt;br /&gt; &lt;strong&gt;Note: after every change made to posts or after creating a new post, you must knit each post separately.&lt;/strong&gt; The listings page is then automatically updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create README.md and CNAME in /blog for your Github repository.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;README.md is optional but usual practice. CNAME is a text file containing the domain name if using a custom domain.&lt;/p&gt;
&lt;/aside&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new repository at &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To set up git and add your new repository as a remote, bring up the command line, cd to your /blog directory and:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial commit&amp;quot;
git branch -M main
git remote add origin git@github.com:username/nameofnew.git
git push -u origin main&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Replace ‘username/nameofnew.git’ as appropriate.
&lt;/aside&gt;
&lt;ol start="7" style="list-style-type: decimal"&gt;
&lt;li&gt;At Github, under your new repository, go to Settings &amp;gt;&amp;gt; Pages, set your source branch to ‘main’, and folder to ‘docs’.&lt;br /&gt; Optionally tick ‘Enforce HTTPS’. &lt;br /&gt; Your custom domain name should be configured automatically if you have previously set up your DNS settings to point to Github’s servers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congratulations, your new website should now be online!&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;p&gt;The Distill Reference: &lt;a href="https://rstudio.github.io/distill/" class="uri"&gt;https://rstudio.github.io/distill/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Definitive R Markdown Guide: &lt;a href="https://bookdown.org/yihui/rmarkdown/" class="uri"&gt;https://bookdown.org/yihui/rmarkdown/&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">fca00b12649029771d7b653e3e3cddd4</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/04-distill</guid>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/04-distill/distill_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Github Actions with R</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/05-ghactions</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/05-ghactions/ghactions_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 6f5b37d9b73dcd70f3c8b68eabbe00c4a709f2a3e694d964121af145105f1655&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="github-actions-with-r"&gt;Github Actions with R&lt;/h3&gt;
&lt;p&gt;Set up a cron job to run your R scripts at specified times.&lt;/p&gt;
&lt;p&gt;Enabled with a simple yaml configuration file.&lt;/p&gt;
&lt;p&gt;Save the following as main.yml in .github/workflows of your Github repository:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;name: Raction
on:
  schedule:
    - cron: &amp;#39;30 22 * * 1-5&amp;#39;
jobs:
  render:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up R
        uses: r-lib/actions/setup-r@v1
      - name: Install dependencies
        run: |
          install.packages(c(&amp;quot;magrittr&amp;quot;, &amp;quot;purrr&amp;quot;), type = &amp;quot;win.binary&amp;quot;)
        shell: Rscript {0}
      - name: Script
        run: Rscript nameofscript.R
      - name: Commit files
        run: |
          git config --local user.name github-actions
          git config --local user.email &amp;quot;actions@github.com&amp;quot;
          git add output/*
          git commit -am &amp;quot;commit on $(date)&amp;quot;
          git push origin main
        env:
          REPO_KEY: ${{secrets.GITHUB_TOKEN}}
          username: github-actions&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;This example cron job runs every Mon-Fri at 22.30.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customize your R packages to install.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to change nameofscript.R to your actual script name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assumes your script writes files to the ‘output’ directory, change if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assumes your repository branch is ‘main’, change if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that this script is run on a Windows VM using Windows R binary packages. This is currently much faster than building a lot of dependencies on Linux (which is also prone to failure).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;
&lt;h3 id="reference"&gt;Reference&lt;/h3&gt;
&lt;p&gt;The Github Actions with R reference: &lt;br /&gt; &lt;a href="https://orchid00.github.io/actions_sandbox/" class="uri"&gt;https://orchid00.github.io/actions_sandbox/&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">a60e2484fb40299c6384f5204ab5df8c</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/05-ghactions</guid>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/05-ghactions/ghactions_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>R | Selenium</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/03-rselenium</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/03-rselenium/rselenium_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 809e2e2a3967742faea6f9e11e0a4c533511f9710ac41812dcbcae3c78913cac&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="use-case"&gt;Use case&lt;/h3&gt;
&lt;p&gt;Whenever you need to programmatically drive a web browser.&lt;/p&gt;
&lt;p&gt;Most often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to scrape information behind a login screen&lt;/li&gt;
&lt;li&gt;when the http server does not return a simple html document&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="initial-setup"&gt;Initial setup&lt;/h3&gt;
&lt;p&gt;Prerequisites: JRE or JDK installed on your system, Mozilla Firefox&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Install the &lt;a href="https://github.com/ropensci/RSelenium"&gt;RSelenium&lt;/a&gt; package from CRAN:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;RSelenium&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;Go to &lt;a href="https://selenium-release.storage.googleapis.com/index.html" class="uri"&gt;https://selenium-release.storage.googleapis.com/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Download selenium-server-standalone-4.0.0-alpha-2.jar (or whatever is the latest ‘selenium-server-standalone’ file)&lt;/p&gt;
&lt;ol start="3" style="list-style-type: decimal"&gt;
&lt;li&gt;Go to &lt;a href="https://github.com/mozilla/geckodriver" class="uri"&gt;https://github.com/mozilla/geckodriver&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Download the latest Mozilla geckodriver release, and place in same directory as the jar file&lt;/p&gt;
&lt;h3 id="running-selenium-webdriver"&gt;Running Selenium Webdriver&lt;/h3&gt;
&lt;p&gt;At the terminal, first cd to the directory where your two new files are saved, then run:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;java -jar selenium-server-standalone-4.0.0-alpha-2.jar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The selenium server must be up and running before attempting to execute the R code below.&lt;/p&gt;
&lt;h3 id="rselenium-quickstart-code"&gt;RSelenium quickstart code&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(RSelenium)
library(keyring)
library(rvest)
library(magrittr)

# Start Selenium Session
remDr &amp;lt;- remoteDriver(
  remoteServerAddr = &amp;quot;localhost&amp;quot;,
  port = 4444L,
  browserName = &amp;quot;firefox&amp;quot;
)

remDr$open()

# Navigate to login page
remDr$navigate(&amp;quot;https://website.com/login&amp;quot;)
Sys.sleep(5) # Give page time to load

# Find &amp;#39;username&amp;#39; element and send &amp;#39;saved_user&amp;#39; as input
webElem1 &amp;lt;- remDr$findElement(using = &amp;quot;xpath&amp;quot;, &amp;quot;//input[@name = &amp;#39;username&amp;#39;]&amp;quot;)
webElem1$sendKeysToElement(list(key_get(&amp;quot;saved_user&amp;quot;)))

# Find &amp;#39;password&amp;#39; element and send &amp;#39;saved_pass&amp;#39; and &amp;#39;enter&amp;#39; keystroke as input
webElem2 &amp;lt;- remDr$findElement(using = &amp;quot;xpath&amp;quot;, &amp;quot;//input[@name = &amp;#39;password&amp;#39;]&amp;quot;)
webElem2$sendKeysToElement(list(key_get(&amp;quot;saved_pass&amp;quot;), key = &amp;quot;enter&amp;quot;))
Sys.sleep(5) # Give page time to load

# Navigate to desired page and download source
remDr$navigate(&amp;quot;https://website.com/somepage&amp;quot;)
Sys.sleep(5) # Give page time to load
html &amp;lt;- remDr$getPageSource()[[1]] %&amp;gt;% read_html()

# Use further rvest commands to extract required data
# ...

# End Selenium Session
remDr$close()&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Customise the URLs as required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customise the xpath to locate the desired input fields as they are actually named on your site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‘saved_user’ and ‘saved_pass’ are values already stored using the &lt;a href="https://github.com/r-lib/keyring"&gt;keyring&lt;/a&gt; package and retrieved here using the ‘key_get’ command. It is never a good idea to store plain text credentials in an R script.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;
&lt;h3 id="reference"&gt;Reference&lt;/h3&gt;
&lt;p&gt;Basic vignette: &lt;a href="https://docs.ropensci.org/RSelenium/articles/basics.html" class="uri"&gt;https://docs.ropensci.org/RSelenium/articles/basics.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">bb2b225638e73838dad05882215b08b6</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/03-rselenium</guid>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/03-rselenium/rselenium_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
  </channel>
</rss>
