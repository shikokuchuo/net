<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>shikokuchuo{net}</title>
    <link>https://shikokuchuo.net/</link>
    <atom:link href="https://shikokuchuo.net/index.xml" rel="self" type="application/rss+xml"/>
    <description>shikokuchuo.net
</description>
    <image>
      <title>shikokuchuo{net}</title>
      <url>https://shikokuchuo.net/favicon.png</url>
      <link>https://shikokuchuo.net/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Wed, 16 Jun 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Combinations using expand.grid</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/10-combinations</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/10-combinations/combinations_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 96e41b3b0fa827b7c9c1f4a7765667064026f9448a78327415264112f7f54dbe&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;
&lt;p&gt;It seems that there is no base R function to generate exhaustive combinations of two identical vectors, sometimes desired as function inputs to mapply/vapply. The ‘combn’ function from the ‘utils’ package is required.&lt;/p&gt;
&lt;p&gt;‘combn’ outputs the unique set of combinations, so for the example below where the first 8 letters of the alphabet are used, the combination {a, b} appears, but {b, a} does not. Similarly the cases where the two elements are identical such as {a, a} also do not feature. It can be seen that there are 28 (or 8 choose 2) unique combinations for the vector of length 8.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x &amp;lt;- letters[1:8]
xlen &amp;lt;- length(x)

combn &amp;lt;- utils::combn(x, 2)
combn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="expand.grid"&gt;expand.grid&lt;/h3&gt;
&lt;p&gt;‘expand.grid’ from the base package is a useful function in its own right, most well-known perhaps for its use in generating hyperparameter tuning grids in machine learning models.&lt;/p&gt;
&lt;p&gt;‘expand.grid’ produces a data frame in columns rather than a matrix in rows like ‘combn’. Hence just for demonstration purposes to compare like-for-like, a bit of manipulation is done below to make the output exactly the same format. In real world usage the output of expand.grid can just be used ‘as is’.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;grid &amp;lt;- expand.grid(x, x, KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
grid &amp;lt;- t(as.matrix(grid))
grid &amp;lt;- rbind(grid[2,], grid[1,])
rownames(grid) &amp;lt;- NULL
grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,] &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;  
[2,] &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;  
     [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52]
[1,] &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
     [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]
[1,] &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;  
     [,63] [,64]
[1,] &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be seen that the output of ‘expand.grid’ is simply all combinations, of which there are 8^2 = 64 in total.&lt;/p&gt;
&lt;h3 id="ichimokuduplicate"&gt;ichimoku::duplicate&lt;/h3&gt;
&lt;p&gt;So how to get from the output of ‘expand.grid’ to that of ‘combn’? Well, with the help of a simple algorithm, which has been coded into the ‘duplicate’ function from the ‘ichimoku’ package, expressly for this purpose.&lt;/p&gt;
&lt;p&gt;From the function documentation: ‘create a vector of element positions of duplicates in the output of expand.grid on 2 identical vectors’.&lt;/p&gt;
&lt;p&gt;Feel free to inspect the code behind the function, but it is simply a case of codifying the sequence of duplicates into a formula.&lt;/p&gt;
&lt;p&gt;Using the function as per the below, ‘grid1’ contains all unique combinations and also those where the two elements are identical. This is sometimes the desired output if two of the same elements is still considered a unique combination, and simply that the order does not matter.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)

grid1 &amp;lt;- grid[, -duplicate(xlen)]
grid1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,] &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,33] [,34] [,35] [,36]
[1,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the ‘identical = TRUE’ argument is set for ‘duplicate’, identical elements are also removed. ‘grid2’ should then be the same as ‘combn’ obtained above.&lt;/p&gt;
&lt;p&gt;Indeed it can be seen that both ‘identical’ and ‘all.equal’ return TRUE.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;grid2 &amp;lt;- grid[, -duplicate(xlen, identical = TRUE)]
grid2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;identical(combn, grid2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;all.equal(combn, grid2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="benchmarking-the-results"&gt;Benchmarking the results&lt;/h3&gt;
&lt;p&gt;‘Microbenchmark’ can be used to benchmark the performance, where it is usual practice to compare median values.&lt;/p&gt;
&lt;p&gt;For small vector lengths, expand.grid is not as performant. This is somewhat to be expected given the overhead of working with data frames rather than matrices. However the absolute times are also small so any difference would not matter as much.&lt;/p&gt;
&lt;p&gt;When the vector length reaches 16, the custom algorithm using expand.grid/duplicate starts to outperform.&lt;/p&gt;
&lt;p&gt;By the time the vector length reaches 1,000, this implies total unique combinations of 499,500 and the custom algorithm is already over 7x faster.&lt;/p&gt;
&lt;p&gt;It should be noted that the custom algorithm is tailored for the special case of combn(x, m) where m = 2 and that is most likely why there can be such an outperformance.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;fn_combn &amp;lt;- function(x) {
  utils::combn(x, 2)
}

fn_grid &amp;lt;- function(x) {
  expand.grid(x, x, KEEP.OUT.ATTRS = FALSE,
              stringsAsFactors = FALSE)[-duplicate(length(x), identical = TRUE), ]
}

microbenchmark::microbenchmark(fn_combn(1:16), fn_grid(1:16))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
           expr    min     lq     mean  median     uq     max neval
 fn_combn(1:16) 69.181 71.549 78.14286 73.9480 78.735 164.560   100
  fn_grid(1:16) 56.708 59.507 65.52700 61.4205 65.811 198.252   100&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark::microbenchmark(fn_combn(1:1000), fn_grid(1:1000))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: milliseconds
             expr       min       lq      mean    median        uq
 fn_combn(1:1000) 284.20095 287.9277 294.38977 290.50384 294.67032
  fn_grid(1:1000)  35.41869  38.0489  42.11251  39.15508  40.94597
      max neval
 367.7571   100
 113.5726   100&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="use-case-mapply-and-vapply"&gt;Use case: mapply and vapply&lt;/h3&gt;
&lt;p&gt;This type of output is suitable for feeding into functions such as ‘mapply’ or ‘vapply’.&lt;/p&gt;
&lt;p&gt;A standard use for mapply is when multiple arguments have to be mapped into a function. Here ‘simplify = FALSE’ is set to have mapply return a list, and fed into ‘do.call’ with ‘c’ to create a vector. This is a safer and more performant method to create a vector than relying on the built-in simplification.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;do.call(c, mapply(function(x, y) paste0(x, &amp;quot;&amp;amp;&amp;quot;, y), 
                  grid2[1, ], grid2[2, ],
                  SIMPLIFY = FALSE, USE.NAMES = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] &amp;quot;a&amp;amp;b&amp;quot; &amp;quot;a&amp;amp;c&amp;quot; &amp;quot;a&amp;amp;d&amp;quot; &amp;quot;a&amp;amp;e&amp;quot; &amp;quot;a&amp;amp;f&amp;quot; &amp;quot;a&amp;amp;g&amp;quot; &amp;quot;a&amp;amp;h&amp;quot; &amp;quot;b&amp;amp;c&amp;quot; &amp;quot;b&amp;amp;d&amp;quot; &amp;quot;b&amp;amp;e&amp;quot; &amp;quot;b&amp;amp;f&amp;quot;
[12] &amp;quot;b&amp;amp;g&amp;quot; &amp;quot;b&amp;amp;h&amp;quot; &amp;quot;c&amp;amp;d&amp;quot; &amp;quot;c&amp;amp;e&amp;quot; &amp;quot;c&amp;amp;f&amp;quot; &amp;quot;c&amp;amp;g&amp;quot; &amp;quot;c&amp;amp;h&amp;quot; &amp;quot;d&amp;amp;e&amp;quot; &amp;quot;d&amp;amp;f&amp;quot; &amp;quot;d&amp;amp;g&amp;quot; &amp;quot;d&amp;amp;h&amp;quot;
[23] &amp;quot;e&amp;amp;f&amp;quot; &amp;quot;e&amp;amp;g&amp;quot; &amp;quot;e&amp;amp;h&amp;quot; &amp;quot;f&amp;amp;g&amp;quot; &amp;quot;f&amp;amp;h&amp;quot; &amp;quot;g&amp;amp;h&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An equivalent example using ‘vapply’ is given below. ‘vapply’ is also a safe choice for programming as an output template is explicitly specified, here ‘character(1L)’, hence the returned values are all expected to be of type ‘character’ of length ‘1’ otherwise an error is thrown.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;vapply(seq_along(grid2[1L, ]),
       function(i) paste0(grid2[1L, i], &amp;quot;&amp;amp;&amp;quot;, grid2[2L, i]),
       character(1L), USE.NAMES = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] &amp;quot;a&amp;amp;b&amp;quot; &amp;quot;a&amp;amp;c&amp;quot; &amp;quot;a&amp;amp;d&amp;quot; &amp;quot;a&amp;amp;e&amp;quot; &amp;quot;a&amp;amp;f&amp;quot; &amp;quot;a&amp;amp;g&amp;quot; &amp;quot;a&amp;amp;h&amp;quot; &amp;quot;b&amp;amp;c&amp;quot; &amp;quot;b&amp;amp;d&amp;quot; &amp;quot;b&amp;amp;e&amp;quot; &amp;quot;b&amp;amp;f&amp;quot;
[12] &amp;quot;b&amp;amp;g&amp;quot; &amp;quot;b&amp;amp;h&amp;quot; &amp;quot;c&amp;amp;d&amp;quot; &amp;quot;c&amp;amp;e&amp;quot; &amp;quot;c&amp;amp;f&amp;quot; &amp;quot;c&amp;amp;g&amp;quot; &amp;quot;c&amp;amp;h&amp;quot; &amp;quot;d&amp;amp;e&amp;quot; &amp;quot;d&amp;amp;f&amp;quot; &amp;quot;d&amp;amp;g&amp;quot; &amp;quot;d&amp;amp;h&amp;quot;
[23] &amp;quot;e&amp;amp;f&amp;quot; &amp;quot;e&amp;amp;g&amp;quot; &amp;quot;e&amp;amp;h&amp;quot; &amp;quot;f&amp;amp;g&amp;quot; &amp;quot;f&amp;amp;h&amp;quot; &amp;quot;g&amp;amp;h&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">3482590168b4ecbec0d448d8534dcd47</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/10-combinations</guid>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/10-combinations/combinations_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>do.call / lapply</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/09-docall-lapply</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/09-docall-lapply/docall-lapply_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 2074954df14cc65b017b3e9d4b291353151672d450f2b623acc2a5d253767e42&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="use-case"&gt;Use case&lt;/h3&gt;
&lt;p&gt;The use of the do.call / lapply combination is a powerful way to leverage functional programming in R. In short, you write a function that performs some actions and apply it to a list of inputs, which can then be fed into a function that combines everything into a single object.&lt;/p&gt;
&lt;p&gt;Let us take an example, where we would like to calculate the ichimoku clouds for a portfolio of stocks, but also preserve the volume data, all in one tidy object.&lt;/p&gt;
&lt;h3 id="setup"&gt;Setup&lt;/h3&gt;
&lt;p&gt;We could set it up as per the below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tickers: a vector defining the stock symbols in our portfolio&lt;/li&gt;
&lt;li&gt;process: a function that generates a row in a data frame or matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)

tickers &amp;lt;- c(&amp;quot;C&amp;quot;, &amp;quot;MS&amp;quot;, &amp;quot;JPM&amp;quot;, &amp;quot;GS&amp;quot;)

process &amp;lt;- function(x) {
  # Use the &amp;#39;quantmod&amp;#39; package to download pricing data
  pxdata &amp;lt;- quantmod::getSymbols(x, from = &amp;quot;2020-04-15&amp;quot;, to = &amp;quot;2021-05-27&amp;quot;, auto.assign = FALSE)
  # Extract volume column
  volume &amp;lt;- pxdata[, grep(&amp;quot;Volume&amp;quot;, colnames(pxdata))]
  # Calculate the cloud by calling ichimoku() from the &amp;#39;ichimoku&amp;#39; package
  cloud &amp;lt;- ichimoku(pxdata, ticker = x)
  # Return a list of ticker, ichimoku cloud object, volume data
  list(x, cloud, volume)
}&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Note: the original pricing data is preserved within the ichimoku object.
&lt;/aside&gt;
&lt;p&gt;We now want to apply our function to each element of ‘tickers’ in turn, and then for the results to be combined.&lt;/p&gt;
&lt;h3 id="loop"&gt;Loop&lt;/h3&gt;
&lt;p&gt;One way to achieve this would be to iterate over ‘tickers’ using a loop:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Define a list to contain the loop output, specifying the length in advance as good practice
out &amp;lt;- vector(mode = &amp;quot;list&amp;quot;, length = length(tickers))

# Loop over each element in &amp;#39;tickers&amp;#39; and save in pre-defined list
for(i in seq_along(tickers)) out[[i]] &amp;lt;- process(tickers[i])

# Create output matrix by calling rbind on each element of the list
portfolio &amp;lt;- do.call(rbind, out)

portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]  [,2]          [,3]   
[1,] &amp;quot;C&amp;quot;   ichimoku,3696 xts,282
[2,] &amp;quot;MS&amp;quot;  ichimoku,3696 xts,282
[3,] &amp;quot;JPM&amp;quot; ichimoku,3696 xts,282
[4,] &amp;quot;GS&amp;quot;  ichimoku,3696 xts,282&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach takes 3 lines of code.&lt;/p&gt;
&lt;p&gt;Furthermore, ‘i’ and ‘out’ remain as leftover objects in the global environment.&lt;/p&gt;
&lt;p&gt;Somewhat messy.&lt;/p&gt;
&lt;h3 id="do.call-lapply"&gt;do.call / lapply&lt;/h3&gt;
&lt;p&gt;Instead we can use a do.call / lapply combination to achieve the same result in one line:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;portfolio &amp;lt;- do.call(rbind, lapply(tickers, process))

portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]  [,2]          [,3]   
[1,] &amp;quot;C&amp;quot;   ichimoku,3696 xts,282
[2,] &amp;quot;MS&amp;quot;  ichimoku,3696 xts,282
[3,] &amp;quot;JPM&amp;quot; ichimoku,3696 xts,282
[4,] &amp;quot;GS&amp;quot;  ichimoku,3696 xts,282&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are also no intermediate objects generated that clutter the global environment.&lt;/p&gt;
&lt;p&gt;To explain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First lapply applies to a list or list-like object (‘tickers’), a function (‘process’). lapply always returns a list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This can then be fed into do.call, which calls a function (‘rbind’) on a list of arguments (the output of lapply i.e. the lists returned by ‘process’).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The use of do.call / lapply provides for a far more succinct and distinctive coding style.&lt;/p&gt;
&lt;h3 id="tidy-data-output"&gt;Tidy data output&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]  [,2]          [,3]   
[1,] &amp;quot;C&amp;quot;   ichimoku,3696 xts,282
[2,] &amp;quot;MS&amp;quot;  ichimoku,3696 xts,282
[3,] &amp;quot;JPM&amp;quot; ichimoku,3696 xts,282
[4,] &amp;quot;GS&amp;quot;  ichimoku,3696 xts,282&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‘portfolio’ is a tidy matrix with a row for each ticker, and a column for each data type.&lt;/p&gt;
&lt;p&gt;We can easily access any element of the matrix by specifying its index value, for example the ichimoku cloud for MS by [2,2]:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(portfolio[2,2][[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;img src="https://shikokuchuo.net/posts/09-docall-lapply/docall-lapply_files/figure-html5/output-1.png" width="672" /&gt;
&lt;aside&gt;
Note: Each element of the matrix is wrapped as a list so that they are of equal length. To access the underlying object, the ichimoku cloud in this case, we simply extract it using [[1]].
&lt;/aside&gt;
&lt;p&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Further examples: Youngju Nielsen of Sungkyunkwan University uses do.call / lapply to good effect in her course &lt;a href="https://www.coursera.org/learn/the-fundamental-of-data-driven-investment/" class="uri"&gt;https://www.coursera.org/learn/the-fundamental-of-data-driven-investment/&lt;/a&gt;&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">5a539cf9f73b4d355bbed7a9fb4878d1</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/09-docall-lapply</guid>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/09-docall-lapply/docall-lapply_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>ichimoku</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/08-ichimoku</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 9b787ca60956d571ad9686d55815fcff38fce9d550ccb1310c0b9c11dfa8069e&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;p&gt;An implementation in R of the Ichimoku Kinkō Hyō (一目均衡表) charting system, also commonly known as ‘cloud charts’.&lt;/p&gt;
&lt;p&gt;The technique is a refinement on candlestick charting originating from Japan, now in widespread use in technical analysis worldwide. Translating to ‘one-glance equilibrium chart’, it allows the price action and market structure of financial securities to be determined ‘at-a-glance’.&lt;/p&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;For both publication-ready and fully-interactive charts for analysis.&lt;/p&gt;
&lt;p&gt;Simply ichimoku() and plot().&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)
TKR &amp;lt;- sample_ohlc_data

cloud &amp;lt;- ichimoku(TKR)

plot(cloud, from = &amp;quot;2020-05-01&amp;quot;, to = &amp;quot;2020-12-03&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(cloud, from = &amp;quot;2020-05-01&amp;quot;, to = &amp;quot;2020-12-03&amp;quot;, theme = &amp;quot;dark&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-2.png" width="672" /&gt;&lt;/p&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install the released version of ichimoku from CRAN:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;ichimoku&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or install the development version of ichimoku from GitHub with:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;devtools::install_github(&amp;quot;shikokuchuo/ichimoku&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="package-site"&gt;Package site&lt;/h3&gt;
&lt;p&gt;Hosted ourselves at: &lt;a href="https://shikokuchuo.net/ichimoku/" class="uri"&gt;https://shikokuchuo.net/ichimoku/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ichimoku-kinko-hyo"&gt;Ichimoku Kinko Hyo&lt;/h3&gt;
&lt;p&gt;The system consists of the following chart lines added to a candlestick chart:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tenkan-sen&lt;/strong&gt; (転換線): [conversion line] the mid-point of the highest high and lowest low for the past 9 periods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kijun-sen&lt;/strong&gt; (基準線): [base line] the mid-point of the highest high and lowest low for the past 26 periods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Senkou span A&lt;/strong&gt; (先行帶A): [leading span A] the mid-point of Tenkan-sen and Kijun-sen plotted ahead 26 periods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Senkou span B&lt;/strong&gt; (先行帶B): [leading span B] the mid-point of the highest high and lowest low for the past 52 periods, plotted ahead 26 periods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chikou span&lt;/strong&gt; (遲行帶): [lagging span] the current closing price plotted 26 periods behind.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;kumo&lt;/strong&gt; (雲) [cloud] is the area between Senkou span A and Senkou span B (usually shaded on a chart).&lt;/p&gt;
&lt;h3 id="interpretation"&gt;Interpretation&lt;/h3&gt;
&lt;p&gt;Ichimoku Kinkō Hyō translates roughly to ‘one-glance equilibrium chart’. It is designed to allow the price action and market structure of financial securities to be determined ‘at-a-glance’ in a highly visual fashion.&lt;/p&gt;
&lt;p&gt;For example in a strongly upwards-trending market, the candlesticks will be above the Tenkan-sen, which will be above the Kijun-sen, which will be above the cloud, and the Chikou span may not have anything above it.&lt;/p&gt;
&lt;p&gt;The lines and the cloud represent dynamic support and resistance zones relative to the price candles. Generally the thicker the cloud, the tougher the support/resistance. In our previous example, if the price now reverts downwards, it can expect support first at the Kijun-sen, then the Tenkan-sen and finally the cloud itself.&lt;/p&gt;
&lt;p&gt;More subtle interpretations involve the Chikou span in particular and its action in relation to the cloud lines as well as the candles.&lt;/p&gt;
&lt;h3 id="context"&gt;Context&lt;/h3&gt;
&lt;p&gt;Ichimoku analysis is the latest evolution in refining candlestick charting techniques, which also originated from Japan in the 18th century. Actually developed during the mid-20th century, it gained popularity especially from the late 1990s onwards, and is now used on trading floors worldwide.&lt;/p&gt;
&lt;p&gt;The time periods have traditionally been calculated as 9, 26 and 52 based on manual data analysis performed in Japan in a pre-computer age where there was a 6-day working week resulting in 26 average trading days in a month. Although this bears little relevance to the current day, the use of these time periods has persisted as an ‘industry norm’ or ‘accepted practice’.&lt;/p&gt;
&lt;p&gt;To use other periods would be meaningless in a sense as everyone uses these parameters and ‘market psychology’ can and often does create its own realities, independent of any fundamentals. However, there is no reason for the technique not to evolve, and to reflect changing trading realities perhaps other parameters will become more relevant in the collective psychology.&lt;/p&gt;
&lt;p&gt;Finally, the use originated with daily candlesticks, and the most valid interpretation remains for daily data. However, it is equally used today for both shorter intra-day, e.g. 4-hour or hourly, and longer, e.g. weekly or monthly, charts.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">b3f7145e73b6854dc8553ba19fc5a4b3</distill:md5>
      <category>R</category>
      <category>Quantitative Finance</category>
      <guid>https://shikokuchuo.net/posts/08-ichimoku</guid>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Distill for R Markdown</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/04-distill</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/04-distill/distill_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 db79682f8bee39d7ed9231200fd076ebed92a4471a9f3ce611d0a5a28bb984a3&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="created-using-distill"&gt;Created using Distill&lt;/h3&gt;
&lt;p&gt;This website was created using &lt;a href="https://pkgs.rstudio.com/distill/"&gt;Distill&lt;/a&gt; for R Markdown, a web publishing format optimised for scientific and technical communication.&lt;/p&gt;
&lt;h3 id="key-advantages"&gt;Key advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R markdown to run R code (and all the possibility that brings)&lt;/li&gt;
&lt;li&gt;Use markdown / html interchangeably&lt;/li&gt;
&lt;li&gt;No dependency on Hugo or Jekyll, so no lock-in or need to maintain those stacks&lt;/li&gt;
&lt;li&gt;Out-of-the-box support for mobile&lt;/li&gt;
&lt;li&gt;Clean and attractive defaults&lt;/li&gt;
&lt;li&gt;Mainly “just works”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install release version of Distill from CRAN:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;distill&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="distill-blog-hosted-on-github-pages-step-by-step-instructions"&gt;Distill blog hosted on Github Pages step-by-step instructions&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Create a new blog at /blog of your current working directory in R:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;distill::create_blog(dir = &amp;quot;blog&amp;quot;, title = &amp;quot;My New Blog&amp;quot;, gh_pages = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Make some inital changes to _site.yml. Select the ‘build’ tab in RStudio and hit ‘Build Website’. This will generate the website. &lt;br /&gt;&lt;br /&gt; &lt;strong&gt;Note: building the website does not generate blog posts.&lt;/strong&gt; Each time the website is re-built, only the .Rmd files in the base directory will be automatically re-generated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modify the yaml front matter and content of the example blog post. Then hit ‘Knit’ in RStudio to generate the post. &lt;br /&gt;&lt;br /&gt; &lt;strong&gt;Note: after every change made to posts or after creating a new post, you must knit each post separately.&lt;/strong&gt; The listings page is then automatically updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create README.md and CNAME in /blog for your Github repository.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;README.md is optional but usual practice. CNAME is a text file containing the domain name if using a custom domain.&lt;/p&gt;
&lt;/aside&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new repository at &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To set up git and add your new repository as a remote, bring up the command line, cd to your /blog directory and:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial commit&amp;quot;
git branch -M main
git remote add origin git@github.com:username/nameofnew.git
git push -u origin main&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Replace ‘username/nameofnew.git’ as appropriate.
&lt;/aside&gt;
&lt;ol start="7" style="list-style-type: decimal"&gt;
&lt;li&gt;At Github, under your new repository, go to Settings &amp;gt;&amp;gt; Pages, set your source branch to ‘main’, and folder to ‘docs’.&lt;br /&gt; Optionally tick ‘Enforce HTTPS’. &lt;br /&gt; Your custom domain name should be configured automatically if you have previously set up your DNS settings to point to Github’s servers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congratulations, your new website should now be online!&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;p&gt;The Distill Reference: &lt;a href="https://rstudio.github.io/distill/" class="uri"&gt;https://rstudio.github.io/distill/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Definitive R Markdown Guide: &lt;a href="https://bookdown.org/yihui/rmarkdown/" class="uri"&gt;https://bookdown.org/yihui/rmarkdown/&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">fca00b12649029771d7b653e3e3cddd4</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/04-distill</guid>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/04-distill/distill_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Github Actions with R</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/05-ghactions</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/05-ghactions/ghactions_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 6f5b37d9b73dcd70f3c8b68eabbe00c4a709f2a3e694d964121af145105f1655&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="github-actions-with-r"&gt;Github Actions with R&lt;/h3&gt;
&lt;p&gt;Set up a cron job to run your R scripts at specified times.&lt;/p&gt;
&lt;p&gt;Enabled with a simple yaml configuration file.&lt;/p&gt;
&lt;p&gt;Save the following as main.yml in .github/workflows of your Github repository:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;name: Raction
on:
  schedule:
    - cron: &amp;#39;30 22 * * 1-5&amp;#39;
jobs:
  render:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up R
        uses: r-lib/actions/setup-r@v1
      - name: Install dependencies
        run: |
          install.packages(c(&amp;quot;magrittr&amp;quot;, &amp;quot;purrr&amp;quot;), type = &amp;quot;win.binary&amp;quot;)
        shell: Rscript {0}
      - name: Script
        run: Rscript nameofscript.R
      - name: Commit files
        run: |
          git config --local user.name github-actions
          git config --local user.email &amp;quot;actions@github.com&amp;quot;
          git add output/*
          git commit -am &amp;quot;commit on $(date)&amp;quot;
          git push origin main
        env:
          REPO_KEY: ${{secrets.GITHUB_TOKEN}}
          username: github-actions&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;This example cron job runs every Mon-Fri at 22.30.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customize your R packages to install.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to change nameofscript.R to your actual script name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assumes your script writes files to the ‘output’ directory, change if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assumes your repository branch is ‘main’, change if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that this script is run on a Windows VM using Windows R binary packages. This is currently much faster than building a lot of dependencies on Linux (which is also prone to failure).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;
&lt;h3 id="reference"&gt;Reference&lt;/h3&gt;
&lt;p&gt;The Github Actions with R reference: &lt;br /&gt; &lt;a href="https://orchid00.github.io/actions_sandbox/" class="uri"&gt;https://orchid00.github.io/actions_sandbox/&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">a60e2484fb40299c6384f5204ab5df8c</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/05-ghactions</guid>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/05-ghactions/ghactions_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>R | Selenium</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/03-rselenium</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/03-rselenium/rselenium_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 809e2e2a3967742faea6f9e11e0a4c533511f9710ac41812dcbcae3c78913cac&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="use-case"&gt;Use case&lt;/h3&gt;
&lt;p&gt;Whenever you need to programmatically drive a web browser.&lt;/p&gt;
&lt;p&gt;Most often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to scrape information behind a login screen&lt;/li&gt;
&lt;li&gt;when the http server does not return a simple html document&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="initial-setup"&gt;Initial setup&lt;/h3&gt;
&lt;p&gt;Prerequisites: JRE or JDK installed on your system, Mozilla Firefox&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Install the &lt;a href="https://github.com/ropensci/RSelenium"&gt;RSelenium&lt;/a&gt; package from CRAN:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;RSelenium&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;Go to &lt;a href="https://selenium-release.storage.googleapis.com/index.html" class="uri"&gt;https://selenium-release.storage.googleapis.com/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Download selenium-server-standalone-4.0.0-alpha-2.jar (or whatever is the latest ‘selenium-server-standalone’ file)&lt;/p&gt;
&lt;ol start="3" style="list-style-type: decimal"&gt;
&lt;li&gt;Go to &lt;a href="https://github.com/mozilla/geckodriver" class="uri"&gt;https://github.com/mozilla/geckodriver&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Download the latest Mozilla geckodriver release, and place in same directory as the jar file&lt;/p&gt;
&lt;h3 id="running-selenium-webdriver"&gt;Running Selenium Webdriver&lt;/h3&gt;
&lt;p&gt;At the terminal, first cd to the directory where your two new files are saved, then run:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;java -jar selenium-server-standalone-4.0.0-alpha-2.jar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The selenium server must be up and running before attempting to execute the R code below.&lt;/p&gt;
&lt;h3 id="rselenium-quickstart-code"&gt;RSelenium quickstart code&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(RSelenium)
library(keyring)
library(rvest)
library(magrittr)

# Start Selenium Session
remDr &amp;lt;- remoteDriver(
  remoteServerAddr = &amp;quot;localhost&amp;quot;,
  port = 4444L,
  browserName = &amp;quot;firefox&amp;quot;
)

remDr$open()

# Navigate to login page
remDr$navigate(&amp;quot;https://website.com/login&amp;quot;)
Sys.sleep(5) # Give page time to load

# Find &amp;#39;username&amp;#39; element and send &amp;#39;saved_user&amp;#39; as input
webElem1 &amp;lt;- remDr$findElement(using = &amp;quot;xpath&amp;quot;, &amp;quot;//input[@name = &amp;#39;username&amp;#39;]&amp;quot;)
webElem1$sendKeysToElement(list(key_get(&amp;quot;saved_user&amp;quot;)))

# Find &amp;#39;password&amp;#39; element and send &amp;#39;saved_pass&amp;#39; and &amp;#39;enter&amp;#39; keystroke as input
webElem2 &amp;lt;- remDr$findElement(using = &amp;quot;xpath&amp;quot;, &amp;quot;//input[@name = &amp;#39;password&amp;#39;]&amp;quot;)
webElem2$sendKeysToElement(list(key_get(&amp;quot;saved_pass&amp;quot;), key = &amp;quot;enter&amp;quot;))
Sys.sleep(5) # Give page time to load

# Navigate to desired page and download source
remDr$navigate(&amp;quot;https://website.com/somepage&amp;quot;)
Sys.sleep(5) # Give page time to load
html &amp;lt;- remDr$getPageSource()[[1]] %&amp;gt;% read_html()

# Use further rvest commands to extract required data
# ...

# End Selenium Session
remDr$close()&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Customise the URLs as required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customise the xpath to locate the desired input fields as they are actually named on your site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‘saved_user’ and ‘saved_pass’ are values already stored using the &lt;a href="https://github.com/r-lib/keyring"&gt;keyring&lt;/a&gt; package and retrieved here using the ‘key_get’ command. It is never a good idea to store plain text credentials in an R script.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;
&lt;h3 id="reference"&gt;Reference&lt;/h3&gt;
&lt;p&gt;Basic vignette: &lt;a href="https://docs.ropensci.org/RSelenium/articles/basics.html" class="uri"&gt;https://docs.ropensci.org/RSelenium/articles/basics.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">bb2b225638e73838dad05882215b08b6</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/03-rselenium</guid>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shikokuchuo.net/posts/03-rselenium/rselenium_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
  </channel>
</rss>
