<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>shikokuchuo{net}</title>
    <link>https://shikokuchuo.net/</link>
    <atom:link href="https://shikokuchuo.net/index.xml" rel="self" type="application/rss+xml"/>
    <description>shikokuchuo.net
</description>
    <image>
      <title>shikokuchuo{net}</title>
      <url>https://shikokuchuo.net/favicon.png</url>
      <link>https://shikokuchuo.net/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Fri, 18 Mar 2022 00:00:00 +0000</lastBuildDate>
    <item>
      <title>nanonext - how it provides a concurrency framework for R</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/17-nanonext-concurrency</link>
      <description>


&lt;img src="file735218c29929_files/figure-html/index-1.png" width="672" /&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;p&gt;The &lt;a
href="https://cran.r-project.org/package=nanonext"&gt;nanonext&lt;/a&gt; package,
featured in RStudio’s &lt;a
href="https://rviews.rstudio.com/2022/02/28/january-2022-top-40-new-cran-packages/"&gt;Top
40 New CRAN Packages for January 2022&lt;/a&gt; has been steadily evolving,
adding significant new features, with the aysnc ‘Aio’ interface now
considered complete since release 0.3.0 hit CRAN earlier in March.&lt;/p&gt;
&lt;p&gt;Hence, time to introduce why this is a ‘concurrency framework’ and
not ‘just’ messaging.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cran.r-project.org/package=nanonext"&gt;nanonext&lt;/a&gt; is
a lightweight binding for the NNG (nanomsg next gen) C library, written
in a combination of R and C with no package dependencies. For the
experts who need no further introduction, they may wish to skip straight
to the pkgdown site which contains a more systematic exposition of the
features: &lt;a href="https://shikokuchuo.net/nanonext/"
class="uri"&gt;https://shikokuchuo.net/nanonext/&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="aios"&gt;Aios&lt;/h3&gt;
&lt;p&gt;These are self-resolving objects containing the results of an async
operation.&lt;/p&gt;
&lt;p&gt;The purpose of this section is really to highlight that this is true
async - the real thing. No event loops, nor any other similar
constraints. This provides the freedom to be much more expressive when
coding. Below, we perform actions out of order - receive before we send
- and it is all totally fine.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# loading the package and creating sockets
library(nanonext)
s1 &amp;lt;- socket(&amp;quot;pair&amp;quot;, listen = &amp;quot;inproc://nano&amp;quot;)
s2 &amp;lt;- socket(&amp;quot;pair&amp;quot;, dial = &amp;quot;inproc://nano&amp;quot;)

# an async receive is requested, but no messages are waiting (yet to be sent)
msg &amp;lt;- s2 |&amp;gt; recv_aio()
msg&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt; recvAio &amp;gt;
 - $data for message data
 - $raw for raw message&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;msg$data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;unresolved&amp;#39; logi NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;send_aio()&lt;/code&gt; and &lt;code&gt;recv_aio()&lt;/code&gt; functions return
immediately with an ‘Aio’ object, but perform their operations async. An
‘Aio’ object returns an ‘unresolved’ logical NA value whilst its
asynchronous operation is ongoing. This is an actual NA value, and Shiny
will, for example, recognise it as being ‘non-truthy’.&lt;/p&gt;
&lt;p&gt;Next we perform a send, and the ‘Aio’ resolves immediately once we do
that. &lt;a href="#fn1" class="footnote-ref"
id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;res &amp;lt;- s1 |&amp;gt; send_aio(data.frame(a = 1, b = 2))

# now that a message has been sent, the &amp;#39;recvAio&amp;#39; automatically resolves
msg$data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  a b
1 1 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;msg$raw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] 58 0a 00 00 00 03 00 04 01 03 00 03 05 00 00 00 00 05 55 54 46
 [22] 2d 38 00 00 03 13 00 00 00 02 00 00 00 0e 00 00 00 01 3f f0 00
 [43] 00 00 00 00 00 00 00 00 0e 00 00 00 01 40 00 00 00 00 00 00 00
 [64] 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 05 6e 61 6d 65 73
 [85] 00 00 00 10 00 00 00 02 00 04 00 09 00 00 00 01 61 00 04 00 09
[106] 00 00 00 01 62 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 05
[127] 63 6c 61 73 73 00 00 00 10 00 00 00 01 00 04 00 09 00 00 00 0a
[148] 64 61 74 61 2e 66 72 61 6d 65 00 00 04 02 00 00 00 01 00 04 00
[169] 09 00 00 00 09 72 6f 77 2e 6e 61 6d 65 73 00 00 00 0d 00 00 00
[190] 02 80 00 00 00 ff ff ff ff 00 00 00 fe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So isn’t this still ‘just’ messaging?&lt;/p&gt;
&lt;p&gt;Well, we can start with introducing a little helper function
&lt;code&gt;unresolved()&lt;/code&gt;. This allows us to perform actions which
depend on resolution of the Aio (completion of the async operation),
both before and after. This means there is no need to ever wait (block)
for an Aio to resolve, as the below demonstrates:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;msg &amp;lt;- recv_aio(s2)

# unresolved() queries for resolution itself so no need to use it again within the while loop
while (unresolved(msg)) {
  # do real stuff here not just the toy actions below
  cat(&amp;quot;unresolved&amp;quot;)
  send_aio(s1, &amp;quot;resolved&amp;quot;)
  Sys.sleep(0.1)  
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;unresolved&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# resolution of the Aio exits the while loop - now do the stuff which depends on its value
msg$data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;resolved&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, an Aio may also be called explicitly by wrapping it in
&lt;code&gt;call_aio()&lt;/code&gt;. This will wait for completion of the Aio
(blocking) if it is yet to resolve.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# to access the resolved value directly (waiting if required)
call_aio(msg)$data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;resolved&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above two methods provide full flexibility for handling async
operations as desired.&lt;/p&gt;
&lt;h3 id="rpc"&gt;RPC&lt;/h3&gt;
&lt;p&gt;So we move closer to explaining how this is a ‘concurrency
framework’. And this involves explaining a little about NNG’s
‘scalability protocols’ - so-called as they are designed to be
masssively scalable.&lt;/p&gt;
&lt;p&gt;These can be thought of as communications patterns built on top of
raw bytestream connections. So a socket of a certain type will always
interact with another in a prescribed way. No matter the platform, and
no matter the language binding.&lt;/p&gt;
&lt;p&gt;Probably the most classic pattern for NNG is the req/rep
(request/reply). This is a guaranteed communications pattern that will
not drop messages, retrying under the hood if messages cannot be
delivered for whatever reason. This can be utilised to implement
‘traditional’ RPC (remote prodecure calls), a bastion of
systems/distributed computing. &lt;a href="#fn2" class="footnote-ref"
id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is where a requestor (client) sends a message to an executor
(server), which performs the requested action and sends back a reply.
{nanonext} provides the convenience functions &lt;code&gt;request()&lt;/code&gt; and
&lt;code&gt;reply()&lt;/code&gt; which implements this logic for use between 2 R
processes, where the requestor supplies data to the reply node, to which
it applies an arbitrary function before sending back the return
value.&lt;/p&gt;
&lt;p&gt;This can be meaningfully used to perform computationally-expensive
calculations or I/O-bound operations such as writing large amounts of
data to disk in a separate ‘server’ process running concurrently.&lt;/p&gt;
&lt;p&gt;Server process: &lt;code&gt;reply()&lt;/code&gt; will wait for a message and
apply a function, in this case &lt;code&gt;rnorm()&lt;/code&gt;, before sending back
the result.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# This code block is run in a separate R process to knit this document

library(nanonext)
rep &amp;lt;- socket(&amp;quot;rep&amp;quot;, listen = &amp;quot;tcp://127.0.0.1:6546&amp;quot;)
ctxp &amp;lt;- context(rep)
reply(ctxp, execute = rnorm, send_mode = &amp;quot;raw&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Client process: &lt;code&gt;request()&lt;/code&gt; performs an async send and
receive request and returns immediately with an Aio object.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(nanonext)
req &amp;lt;- socket(&amp;quot;req&amp;quot;, dial = &amp;quot;tcp://127.0.0.1:6546&amp;quot;)
ctxq &amp;lt;- context(req)
aio &amp;lt;- request(ctxq, data = 1e8, recv_mode = &amp;quot;double&amp;quot;, keep.raw = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the client can run additional code concurrent with the
server processing the request. The Aio will then resolve automatically
or can be called as required.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;call_aio(aio)$data |&amp;gt; str()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; num [1:100000000] 0.143 1.37 2.568 -1.206 -0.136 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is how &lt;a
href="https://cran.r-project.org/package=nanonext"&gt;nanonext&lt;/a&gt; provides
a true concurrency framework. The package provides the necessary tools
to implement anything from a walkie-talkie to distributed computing
clusters and everything in between.&lt;/p&gt;
&lt;h3 id="mirai"&gt;mirai&lt;/h3&gt;
&lt;p&gt;A small (tiny) package has also been released to CRAN in February
2022 that exposes the functionality of executing arbitrary R expressions
asynchronously for use on a single machine. It is called ‘&lt;a
href="https://cran.r-project.org/package=mirai"&gt;mirai&lt;/a&gt;’, the Japanese
for ‘future’. Everything revolves around one single function. It is very
minimalistic. Designed to be intuitive to use, a short intro can be
found here: &lt;a href="https://shikokuchuo.net/mirai/"
class="uri"&gt;https://shikokuchuo.net/mirai/&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes footnotes-end-of-document"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Or more precisely, the Aio will resolve the next time it
is queried - but practically this is the same thing, as the value cannot
be used unless it is queried. This is akin to ‘Schrödinger’s Cat’ - if
we never look into the box, we simply don’t know the state, but as soon
as we look, we will get a resolution one way or another. Here, if the
value is never used, it could remain in a state of ‘superposition’ but
as soon as it is required (even if we are only seeking metadata such as
its length rather than the actual value), it will resolve either to an
‘unresolved’ NA or its actual value.&lt;a href="#fnref1"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Although the generic term includes ‘remote’, obviously
everything can also happen on the same machine in separate processes.&lt;a
href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>e64fa3febe2f583c0d6cd5109e3a4515</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/17-nanonext-concurrency</guid>
      <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/17-nanonext-concurrency/nanonext-concurrency_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Introducing mirai - a minimalist async evaluation framework for R</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/16-introducing-mirai</link>
      <description>Concurrency and parallel code execution</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/16-introducing-mirai</guid>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/16-introducing-mirai/introducing-mirai_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>nanonext for Cross-language Data Exchange</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/15-nanonext-exchange</link>
      <description>A clean and robust approach to R / Python interoperability</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/15-nanonext-exchange</guid>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/15-nanonext-exchange/nanonext-exchange_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Installing an R Build Environment on Solaris</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/14-r-on-solaris</link>
      <description>Run R CMD check or devtools::check() on a local Solaris VM</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/14-r-on-solaris</guid>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/14-r-on-solaris/r-on-solaris_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Reverting Git Commits</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/13-reverting</link>
      <description>Procedure to roll back both local and remote changes</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/13-reverting</guid>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/13-reverting/reverting_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>R Shiny interface for the OANDA fxTrade API</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/12-oanda-studio</link>
      <description>ichimoku::oanda_studio()</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/12-oanda-studio</guid>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/12-oanda-studio/oanda-studio_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Efficient R: Performant data.frame constructors</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/11-dataframes</link>
      <description>How and when to use an alternative to as.data.frame</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/11-dataframes</guid>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/11-dataframes/dataframes_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Efficient R: Combinations using expand.grid</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/10-combinations</link>
      <description>A faster way to generate combinations for mapply and vapply</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/10-combinations</guid>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/10-combinations/combinations_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Efficient R: do.call / lapply</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/09-docall-lapply</link>
      <description>A distinctive coding style</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/09-docall-lapply</guid>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/09-docall-lapply/docall-lapply_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>ichimoku</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/08-ichimoku</link>
      <description>R package for Ichimoku Kinko Hyo cloud charts</description>
      <category>R</category>
      <category>Quantitative Finance</category>
      <guid>https://shikokuchuo.net/posts/08-ichimoku</guid>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Resources for learning</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/07-learning</link>
      <description>A curated selection of online MOOCs</description>
      <category>Resources</category>
      <category>Learning</category>
      <guid>https://shikokuchuo.net/posts/07-learning</guid>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/07-learning/learning_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Datasets</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/06-datasets</link>
      <description>For Econometrics and Machine Learning</description>
      <category>Resources</category>
      <category>Data</category>
      <guid>https://shikokuchuo.net/posts/06-datasets</guid>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/06-datasets/datasets_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Distill for R Markdown</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/04-distill</link>
      <description>Web publishing optimised for scientific and technical communication</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/04-distill</guid>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/04-distill/distill_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Github Actions with R</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/05-ghactions</link>
      <description>Deploy and automate your code to the cloud</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/05-ghactions</guid>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/05-ghactions/ghactions_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>R | Selenium</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/03-rselenium</link>
      <description>Programmatically drive a web browser</description>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/03-rselenium</guid>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/03-rselenium/rselenium_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Resources for global sustainability</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/02-resources</link>
      <description>A compendium</description>
      <category>Resources</category>
      <category>Sustainability</category>
      <guid>https://shikokuchuo.net/posts/02-resources</guid>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/02-resources/resources_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Authenticating photography using cryptographic hashing</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/01-authenticating</link>
      <description>A proof of concept using R</description>
      <category>Photography</category>
      <category>Cryptography</category>
      <guid>https://shikokuchuo.net/posts/01-authenticating</guid>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/01-authenticating/authenticating_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
  </channel>
</rss>
