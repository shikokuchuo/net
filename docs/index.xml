<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>shikokuchuo{net}</title>
    <link>https://shikokuchuo.net/</link>
    <atom:link href="https://shikokuchuo.net/index.xml" rel="self" type="application/rss+xml"/>
    <description>shikokuchuo.net
</description>
    <image>
      <title>shikokuchuo{net}</title>
      <url>https://shikokuchuo.net/favicon.png</url>
      <link>https://shikokuchuo.net/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Wed, 11 Aug 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Reverting Git Commits</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/13-reverting</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/13-reverting/reverting_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 010e16069f8858640c2bb9af4a2293b720161b71d9d6e1f375c30237ea2b4123&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="reverting-local-git-commits"&gt;Reverting Local Git Commits&lt;/h3&gt;
&lt;p&gt;You have made a commit.&lt;/p&gt;
&lt;p&gt;You discover a mistake or something you left out straight after the commit.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;git reset HEAD~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a soft reset. Your changes are preserved. The commit is removed from the record.&lt;/p&gt;
&lt;p&gt;Make the additional changes you need. Add files. Commit.&lt;/p&gt;
&lt;h3 id="reverting-commits-pushed-to-remote-e.g.-github"&gt;Reverting Commits Pushed to Remote (e.g. Github)&lt;/h3&gt;
&lt;p&gt;Copy your folder to a backup location.&lt;/p&gt;
&lt;p&gt;The following is a hard reset, which rolls back to the previous commit. Changes since that commit will be lost. Force push it to the remote.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;git reset HEAD^ --hard
git push origin -f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both local and remote should now be in sync at the previous commit. You may check with:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have Github Actions that are triggered by commits, they will be triggered again despite this being a roll-back. So go and stop those runs if necessary.&lt;/p&gt;
&lt;p&gt;Next, if you have another branch such as ‘gh-pages’ that builds automatically on each commit, roll back that branch as well so it keeps in sync. As this branch has been building on the remote, do a git pull to ensure that your local copy is up to date first before resetting.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;git checkout gh-pages
git pull

git reset HEAD^ --hard
git push -f origin gh-pages&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check status. Switch back to ‘main’ branch (substitute whatever branch you were on).&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;git status
git checkout main&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy back the files with changes you made previously from your backup location.&lt;/p&gt;
&lt;p&gt;Make the additional changes you need. Add files. Commit.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>66afa054e8360f0b5c4f788bd1bf2426</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/13-reverting</guid>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/13-reverting/reverting_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>R Shiny interface for the OANDA fxTrade API</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/12-oanda-studio</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/12-oanda-studio/oanda-studio_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 478ec2042047eb285ec4d30177a825af0f8b106a38ac1faeb863c6c1c9df407f&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="about-ichimoku"&gt;About ichimoku&lt;/h3&gt;
&lt;p&gt;The ichimoku R package&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; provides tools for creating and visualising Ichimoku Kinko Hyo (cloud chart) strategies.&lt;/p&gt;
&lt;p&gt;It features in the &lt;a href="https://cran.r-project.org/view=Finance"&gt;Empirical Finance CRAN Task View&lt;/a&gt;, and was selected as one of &lt;a href="https://rviews.rstudio.com/2021/06/24/may-2021-top-40-new-cran-packages/"&gt;RStudio’s Top 40 New CRAN Packages&lt;/a&gt; for May 2021.&lt;/p&gt;
&lt;p&gt;The latest version incorporates an interface to the OANDA fxTrade API&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="about-the-oanda-fxtrade-api"&gt;About the OANDA fxTrade API&lt;/h3&gt;
&lt;p&gt;OANDA is an authoritative source of foreign exchange data utilised by both governments and global corporations alike. OANDA offers a few APIs, including its rates for business, but the fxTrade API is perhaps the most comprehensive, built upon its retail and professional trading offering of the same name. Access to the fxTrade API is free but requires registration for a practice/demo account.&lt;/p&gt;
&lt;p&gt;The API can be used for retrieving historical and live streaming price data for major currencies, metals, commodities, government bonds and stock indices. It is a rich source of financial data with excellent availability, for instance daily OHLC pricing data for major forex pairs from the start of 2005, and data granularity ranging from 5 seconds to monthly.&lt;/p&gt;
&lt;p&gt;For the total list of over 120 covered instruments please see &lt;a href="https://shikokuchuo.net/ichimoku/articles/xoanda.html#available-instruments"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="screenshots"&gt;Screenshots&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Click on an image to view in full resolution.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Showcased here is the function &lt;code&gt;oanda_studio()&lt;/code&gt;, the implementation in R Shiny. As a Shiny app, the function may be called without specifying any parameters; the full range of options can be selected interactively from within the web interface.&lt;/p&gt;
&lt;p&gt;Data is live and updates at the specified refresh rate (default of every 5 secs).&lt;/p&gt;
&lt;p&gt;The cursor infotip provides an innovative overview of the data directly from the chart (can be turned on or off as desired).&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)

oanda_studio()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="img/oastudio1.png" target="_blank"&gt;&lt;img src="https://shikokuchuo.net/posts/12-oanda-studio/img/oastudio1.png" alt="oanda_studio with infotip" width="750" height="462"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course arguments for customisation can also be specified within the call to &lt;code&gt;oanda_studio()&lt;/code&gt; itself. Demonstrating some further options below with Soybean futures:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;oanda_studio(&amp;quot;SOYBN_USD&amp;quot;, granularity = &amp;quot;M5&amp;quot;, refresh = 10, price = &amp;quot;B&amp;quot;, theme = &amp;quot;dark&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="img/oastudio2.png" target="_blank"&gt;&lt;img src="https://shikokuchuo.net/posts/12-oanda-studio/img/oastudio2.png" alt="oanda_studio in dark mode" width="750" height="462"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="other-functions"&gt;Other functions&lt;/h3&gt;
&lt;p&gt;Other functions to access the OANDA fxTrade API are included in the ichimoku package. These are standard R functions for retrieving data in tabular form and charting (not reliant on Shiny), and include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shikokuchuo.net/ichimoku/reference/oanda.html"&gt;&lt;code&gt;oanda()&lt;/code&gt;&lt;/a&gt; to retrieve price data&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shikokuchuo.net/ichimoku/reference/oanda_stream.html"&gt;&lt;code&gt;oanda_stream()&lt;/code&gt;&lt;/a&gt; to stream a live data feed&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shikokuchuo.net/ichimoku/reference/oanda_chart.html"&gt;&lt;code&gt;oanda_chart()&lt;/code&gt;&lt;/a&gt; to plot real-time ichimoku cloud charts&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="links-and-further-information"&gt;Links and further information&lt;/h3&gt;
&lt;p&gt;ichimoku R package site: &lt;a href="https://shikokuchuo.net/ichimoku/" class="uri"&gt;https://shikokuchuo.net/ichimoku/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ichimoku OANDA fxTrade API vignette: &lt;a href="https://shikokuchuo.net/ichimoku/articles/xoanda.html" class="uri"&gt;https://shikokuchuo.net/ichimoku/articles/xoanda.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OANDA fxTrade API developer website: &lt;a href="https://developer.oanda.com/" class="uri"&gt;https://developer.oanda.com/&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Gao, C. (2021), &lt;em&gt;ichimoku: Visualization and Tools for Ichimoku Kinko Hyo Strategies&lt;/em&gt;. R package version 1.0.0, &lt;a href="https://CRAN.R-project.org/package=ichimoku" class="uri"&gt;https://CRAN.R-project.org/package=ichimoku&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;‘OANDA’ and ‘fxTrade’ are trademarks owned by OANDA Corporation, an entity unaffiliated with the ichimoku package.&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>ebd83434c7ffca85056ac9798f09e08a</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/12-oanda-studio</guid>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/12-oanda-studio/oanda-studio_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Efficient R: Performant data.frame constructors</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/11-dataframes</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/11-dataframes/dataframes_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 eb5d71529ab540bc4865c181a1129e03186e0959c76196a9fbc0c2a16c767856&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="about-as.data.frame"&gt;About as.data.frame&lt;/h3&gt;
&lt;p&gt;data.frame() or as.data.frame() are such ubiquitous functions that we rarely think twice about using them to create dataframes or to convert other objects to dataframes.&lt;/p&gt;
&lt;p&gt;However, they are slow. Extremely slow.&lt;/p&gt;
&lt;p&gt;This is somewhat surprising considering how much they are used, and given that the ‘data.frame’ object is the &lt;em&gt;de facto&lt;/em&gt; standard for tabular data in R, for their constructors to be so inefficient.&lt;/p&gt;
&lt;p&gt;However this is the direct result of the presence of a lot of error checking and validation code, which is perhaps understandable for something as widely used. You simply don’t know what is going to be thrown at the function and so it needs to try to do its best or fail gracefully.&lt;/p&gt;
&lt;p&gt;Below, we demonstrate the inefficiencies of as.data.frame() versus efficient ‘data.frame’ constructors from the ‘ichimoku’ package&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; coded for performance.&lt;/p&gt;
&lt;p&gt;For benchmarking, the ‘microbenchmark’ package will be used. It is usual to compare the median times averaged over a large number of runs, and we will use 10,000 in the cases below.&lt;/p&gt;
&lt;h3 id="matrix-conversion-benchmarking"&gt;Matrix conversion benchmarking&lt;/h3&gt;
&lt;p&gt;A 100x10 matrix of random data drawn from the normal distribution is created as the object ‘matrix’.&lt;/p&gt;
&lt;p&gt;This will be converted into a dataframe using as.data.frame() and ichimoku::matrix_df().&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)
library(microbenchmark)

matrix &amp;lt;- matrix(rnorm(1000), ncol = 10, dimnames = list(1:100, letters[1:10]))

dim(matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 100  10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;head(matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;            a          b          c          d         e          f
1 -0.97378179 -0.1548403 -0.5714620 -0.6455952 0.5205605 -0.5749921
2  1.11101540  2.7750836 -0.4803623  0.4546384 0.3965272 -0.7286963
3 -0.14284354 -0.4721379 -1.6644766  1.1029049 1.8622139  0.1317952
4  0.04434475  0.8963030  0.5766962 -1.2649277 1.8482131 -0.6218877
5  0.71348833  0.9414343 -0.1031840  0.6707541 0.5011148 -2.7596555
6 -1.51402809 -0.2222852 -1.3424366 -0.2689952 0.1963819 -0.5368719
           g           h          i          j
1  1.0248394 -0.67285248 -0.8573886 -1.2362261
2 -1.5385340 -0.03091633 -0.5194276  0.8784707
3 -1.4101556  0.92803385  1.4088071  0.5650762
4  0.6347925 -0.58017924 -0.3400478  0.7011862
5 -0.4442270  0.79094178 -1.4898439 -0.4946893
6 -1.1610129  0.63614680 -0.3711201  1.1841778&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark(as.data.frame(matrix), matrix_df(matrix), times = 10000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
                  expr    min      lq     mean  median      uq
 as.data.frame(matrix) 32.098 36.5125 43.11053 38.7995 40.7515
     matrix_df(matrix) 13.571 15.6050 19.40076 16.3385 17.3210
      max neval
 9634.083 10000
 8910.146 10000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;identical(as.data.frame(matrix), matrix_df(matrix)) &amp;amp;&amp;amp;
  all.equal(as.data.frame(matrix), matrix_df(matrix))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As can be seen, the outputs are identical, but &lt;code&gt;ichimoku::matrix_df()&lt;/code&gt;, which is designed to be a performant ‘data.frame’ constructor, &lt;em&gt;is around twice as fast&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="xts-conversion-benchmarking"&gt;xts conversion benchmarking&lt;/h3&gt;
&lt;p&gt;The ‘xts’ format is a popular choice for large time series data as each observation is indexed by a unique valid timestamp.&lt;/p&gt;
&lt;p&gt;As an example, we use the ichimoku() function from the ‘ichimoku’ package which creates ichimoku objects inheriting the ‘xts’ class. We run ichimoku() on the sample data contained within the package to create an ‘xts’ object ‘cloud’.&lt;/p&gt;
&lt;p&gt;This will be converted into a dataframe using as.data.frame() and ichimoku::xts_df().&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)
library(microbenchmark)

cloud &amp;lt;- ichimoku(sample_ohlc_data)

xts::is.xts(cloud)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;dim(cloud)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 281  12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;print(cloud[1:6], plot = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;            open  high   low close cd tenkan kijun senkouA senkouB
2020-01-02 123.0 123.1 122.5 122.7 -1     NA    NA      NA      NA
2020-01-03 122.7 122.8 122.6 122.8  1     NA    NA      NA      NA
2020-01-05 122.8 123.4 122.4 123.3  1     NA    NA      NA      NA
2020-01-06 123.3 124.3 123.3 124.1  1     NA    NA      NA      NA
2020-01-07 124.1 124.8 124.0 124.8  1     NA    NA      NA      NA
2020-01-08 124.8 125.4 124.5 125.3  1     NA    NA      NA      NA
           chikou cloudT cloudB
2020-01-02  122.8     NA     NA
2020-01-03  122.9     NA     NA
2020-01-05  123.0     NA     NA
2020-01-06  123.9     NA     NA
2020-01-07  123.6     NA     NA
2020-01-08  122.5     NA     NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark(as.data.frame(cloud), xts_df(cloud), times = 10000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
                 expr     min       lq      mean  median       uq
 as.data.frame(cloud) 241.667 257.1640 279.99480 262.097 268.9820
        xts_df(cloud)  33.174  37.7985  42.54595  39.568  41.7635
       max neval
 10345.775 10000
  8067.723 10000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be seen that &lt;code&gt;ichimoku::xts_df()&lt;/code&gt;, which is designed to be a performant ‘data.frame’ constructor, &lt;em&gt;is over 6x as fast&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df1 &amp;lt;- as.data.frame(cloud)

is.data.frame(df1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;str(df1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;data.frame&amp;#39;:   281 obs. of  12 variables:
 $ open   : num  123 123 123 123 124 ...
 $ high   : num  123 123 123 124 125 ...
 $ low    : num  122 123 122 123 124 ...
 $ close  : num  123 123 123 124 125 ...
 $ cd     : num  -1 1 1 1 1 1 -1 0 -1 -1 ...
 $ tenkan : num  NA NA NA NA NA ...
 $ kijun  : num  NA NA NA NA NA NA NA NA NA NA ...
 $ senkouA: num  NA NA NA NA NA NA NA NA NA NA ...
 $ senkouB: num  NA NA NA NA NA NA NA NA NA NA ...
 $ chikou : num  123 123 123 124 124 ...
 $ cloudT : num  NA NA NA NA NA NA NA NA NA NA ...
 $ cloudB : num  NA NA NA NA NA NA NA NA NA NA ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;df2 &amp;lt;- xts_df(cloud)

is.data.frame(df2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;str(df2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;data.frame&amp;#39;:   281 obs. of  13 variables:
 $ index  : POSIXct, format: &amp;quot;2020-01-02&amp;quot; ...
 $ open   : num  123 123 123 123 124 ...
 $ high   : num  123 123 123 124 125 ...
 $ low    : num  122 123 122 123 124 ...
 $ close  : num  123 123 123 124 125 ...
 $ cd     : num  -1 1 1 1 1 1 -1 0 -1 -1 ...
 $ tenkan : num  NA NA NA NA NA ...
 $ kijun  : num  NA NA NA NA NA NA NA NA NA NA ...
 $ senkouA: num  NA NA NA NA NA NA NA NA NA NA ...
 $ senkouB: num  NA NA NA NA NA NA NA NA NA NA ...
 $ chikou : num  123 123 123 124 124 ...
 $ cloudT : num  NA NA NA NA NA NA NA NA NA NA ...
 $ cloudB : num  NA NA NA NA NA NA NA NA NA NA ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The outputs are slightly different as xts_df() preserves the date-time index of ‘xts’ objects as a new first column ‘index’ which is POSIXct in format. The default as.data.frame() constructor converts the index into the row names, which is not desirable as the dates are coerced to type ‘character’.&lt;/p&gt;
&lt;p&gt;So it can be seen that in this case, not only is the performant constructor faster, it is also more fit for purpose.&lt;/p&gt;
&lt;h3 id="when-to-use-performant-constructors"&gt;When to use performant constructors&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;strong&gt;Data which is not already a ‘data.frame’ object being plotted using ‘ggplot2’.&lt;/strong&gt; For example if you have time series data in the ‘xts’ format, calling a ‘ggplot2’ plot method automatically converts the data into a dataframe behind the scenes as ggplot() only works with dataframes internally. Fortunately it does not use as.data.frame() but its own constructor ggplot2::fortify(). Benchmarked below, it is slightly faster than as.data.frame() but the performant constructor &lt;code&gt;ichimoku::xts_df()&lt;/code&gt; &lt;em&gt;is still around 4x as fast&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark(as.data.frame(cloud), ggplot2::fortify(cloud), xts_df(cloud), times = 10000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
                    expr     min      lq      mean   median       uq
    as.data.frame(cloud) 242.866 260.691 279.80472 266.7845 274.2615
 ggplot2::fortify(cloud) 137.486 154.450 189.62133 162.7280 172.3155
           xts_df(cloud)  33.691  39.155  45.96501  41.2790  43.4015
       max neval
  6599.130 10000
 76479.747 10000
  5945.421 10000&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;In a context where performance is critical.&lt;/strong&gt; This is usually in interactive environments such as a Shiny app, perhaps with real time data where slow code can reduce responsiveness or cause bottlenecks in execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Within packages.&lt;/strong&gt; It is usually safe to use performant constructors within functions or for internal unexported functions. If following programming best practices the input and output types for functions are kept consistent, and so the input to the constructor can be controlled and hence its function predictable. Setting appropriate unit tests can also catch any issues early.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="when-to-question-the-use-of-performant-constructors"&gt;When to question the use of performant constructors&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For user-facing functions.&lt;/strong&gt; Having no validation or error-checking code means that a performant constructor may behave unpredictably on data that is not intended to be an input. Within a function, there is a specific or at most finite range of objects that a constructor can receive. When that limit is removed, if the input is not the intended input for a constructor then an error can be expected. As long as this is made clear to the user and there are adequate instructions on proper usage, in an environment where the occasional error message is acceptable, then proceed to use the performant constructor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When the constructor needs to handle a range of input types.&lt;/strong&gt; as.data.frame() is actually an S3 generic with a variety of methods for different object classes. If required to handle a variety of different types of input, it may be easier (if not more performant) to rely on as.data.frame() rather than write code which handles different scenarios.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="what-is-a-performant-constructor"&gt;What is a performant constructor&lt;/h3&gt;
&lt;p&gt;First of all, it is possible to directly use the functions matrix_df() and xts_df() which are exported from the ‘ichimoku’ package. Given the nature of the R ecosystem, this is indeed encouraged.&lt;/p&gt;
&lt;p&gt;However, having seen the advantages of using a performant constructor above, we can now turn to the ‘what’ for the curious.&lt;/p&gt;
&lt;p&gt;What lies behind those functions? Some variation on the below:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# structure() is used to set the &amp;#39;class&amp;#39; and other attributes on an object
structure(list(vec1, vec2, vec3),
          class = &amp;quot;data.frame&amp;quot;,
          row.names = seq_len(length(vec1)))&lt;/code&gt;&lt;/pre&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;A data.frame is simply a list (where each element must be the same length).&lt;/li&gt;
&lt;li&gt;It has an attribute ‘class’ which equals ‘data.frame’.&lt;/li&gt;
&lt;li&gt;It must have row names, which is usually just an integer sequence.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;The vectors in the list (vec1, vec2, vec3, etc.) must be the same length, otherwise a corrupt data.frame warning will be generated.&lt;/li&gt;
&lt;li&gt;If row names are missing then the data will still be present but dim() will show a 0-row dataframe and its print method will not work.&lt;/li&gt;
&lt;li&gt;Row names are not limited to an integer sequence. They can be dates for example. However if not an integer vector, they are first coerced to type ‘character’.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In conclusion, dataframes are not complicated structures but essentially lists with a couple of constraints. Indeed you can see that the underlying data type of a dataframe is just a list:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;c(class(df1), class(df2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;data.frame&amp;quot; &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;c(typeof(df1), typeof(df2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;list&amp;quot; &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="further-information"&gt;Further information&lt;/h3&gt;
&lt;p&gt;Documentation for the performant constructors discussed: &lt;a href="https://shikokuchuo.net/ichimoku/articles/utilities.html#performant-dataframe-constructors" class="uri"&gt;https://shikokuchuo.net/ichimoku/articles/utilities.html#performant-dataframe-constructors&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Gao, C. (2021), &lt;em&gt;ichimoku: Visualization and Tools for Ichimoku Kinko Hyo Strategies&lt;/em&gt;. R package version 1.0.0, &lt;a href="https://CRAN.R-project.org/package=ichimoku" class="uri"&gt;https://CRAN.R-project.org/package=ichimoku&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>f0ee48d76a72921e4e6c435d6c5c4615</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/11-dataframes</guid>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/11-dataframes/dataframes_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Efficient R: Combinations using expand.grid</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/10-combinations</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/10-combinations/combinations_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 96e41b3b0fa827b7c9c1f4a7765667064026f9448a78327415264112f7f54dbe&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;
&lt;p&gt;It seems that there is no base R function to generate exhaustive combinations of two identical vectors, sometimes desired as function inputs to mapply/vapply(). The combn() function from the ‘utils’ package is required.&lt;/p&gt;
&lt;p&gt;utils::combn() outputs the unique set of combinations, so for the example below where the first 8 letters of the alphabet are used, the combination {a, b} appears, but {b, a} does not. Similarly the cases where the two elements are identical such as {a, a} also do not feature. It can be seen that there are 28 (or 8 choose 2) unique combinations for the vector of length 8.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x &amp;lt;- letters[1:8]
xlen &amp;lt;- length(x)

combn &amp;lt;- utils::combn(x, 2)
combn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="expand.grid"&gt;expand.grid&lt;/h3&gt;
&lt;p&gt;expand.grid() from the base package is a useful function in its own right, most well-known perhaps for its use in generating hyperparameter tuning grids in machine learning models.&lt;/p&gt;
&lt;p&gt;expand.grid() produces a data frame in columns rather than a matrix in rows like utils::combn(). Hence just for demonstration purposes to compare like-for-like, a bit of manipulation is done below to make the output exactly the same. In real world usage the output of expand.grid() can be used ‘as is’ without the additional manipulation.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;grid &amp;lt;- expand.grid(x, x, KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
grid &amp;lt;- t(as.matrix(grid))
grid &amp;lt;- rbind(grid[2,], grid[1,])
rownames(grid) &amp;lt;- NULL
grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,] &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;  
[2,] &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;  
     [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52]
[1,] &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
     [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]
[1,] &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;a&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;  
     [,63] [,64]
[1,] &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be seen that the output of expand.grid() is simply all combinations, of which there are 8^2 = 64 in total.&lt;/p&gt;
&lt;h3 id="ichimokugrid_dup"&gt;ichimoku:::grid_dup&lt;/h3&gt;
&lt;p&gt;So how to get from the output of expand.grid() to that of utils::combn()? Well, with the help of a simple algorithm, which has been coded into the grid_dup() function from the ‘ichimoku’ package&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, expressly for this purpose. As this is a package internal function, we have to access it via ‘:::’.&lt;/p&gt;
&lt;p&gt;From the function documentation: ‘create a vector of element positions of duplicates in the output of expand.grid on 2 identical vectors’.&lt;/p&gt;
&lt;p&gt;Using the function as per the below, ‘grid1’ contains all unique combinations and also those where the two elements are identical. This is sometimes the desired output if two of the same elements is still considered a unique combination, and simply that the order of appearance does not matter.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)

grid1 &amp;lt;- grid[, -ichimoku:::grid_dup(xlen)]
grid1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,] &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;  
[2,] &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,33] [,34] [,35] [,36]
[1,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the ‘omit.id = TRUE’ argument is set for grid_dup(), identical elements are also removed. ‘grid2’ should then be the same as ‘combn’ obtained above.&lt;/p&gt;
&lt;p&gt;Indeed it can be seen that both identical() and all.equal() below return TRUE.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;grid2 &amp;lt;- grid[, -ichimoku:::grid_dup(xlen, omit.id = TRUE)]
grid2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;   &amp;quot;b&amp;quot;  
[2,] &amp;quot;b&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]
[1,] &amp;quot;b&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;c&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;d&amp;quot;  
[2,] &amp;quot;h&amp;quot;   &amp;quot;d&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;  
     [,23] [,24] [,25] [,26] [,27] [,28]
[1,] &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;e&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;  
[2,] &amp;quot;f&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;g&amp;quot;   &amp;quot;h&amp;quot;   &amp;quot;h&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;identical(combn, grid2) &amp;amp;&amp;amp; all.equal(combn, grid2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="benchmarking-the-results"&gt;Benchmarking the results&lt;/h3&gt;
&lt;p&gt;‘Microbenchmark’ can be used to benchmark the performance, where it is usual practice to compare median values.&lt;/p&gt;
&lt;p&gt;For small vector lengths, expand.grid() is not as performant. This is somewhat to be expected given the overhead of working with data frames rather than matrices. However the absolute times are also small so any difference would not matter as much.&lt;/p&gt;
&lt;p&gt;When the vector length reaches 16, the custom algorithm using expand.grid()/grid_dup() starts to outperform.&lt;/p&gt;
&lt;p&gt;By the time the vector length reaches 1,000, this implies total unique combinations of 499,500 and the custom algorithm is already c. 7x faster.&lt;/p&gt;
&lt;p&gt;It should be noted that the custom algorithm is tailored for the special case of combn(x, m) where m = 2 and that is most likely why there can be such an outperformance.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;fn_combn &amp;lt;- function(x) {
  utils::combn(x, 2)
}

fn_grid &amp;lt;- function(x) {
  expand.grid(x, x, KEEP.OUT.ATTRS = FALSE,
              stringsAsFactors = FALSE)[-ichimoku:::grid_dup(length(x), omit.id = TRUE), ]
}

microbenchmark::microbenchmark(fn_combn(1:16), fn_grid(1:16))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: microseconds
           expr    min      lq     mean  median      uq     max neval
 fn_combn(1:16) 54.750 56.1545 59.33865 58.0165 59.9260  92.048   100
  fn_grid(1:16) 52.529 55.1830 60.02716 57.5045 60.8565 197.565   100&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;microbenchmark::microbenchmark(fn_combn(1:1000), fn_grid(1:1000))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Unit: milliseconds
             expr       min        lq      mean    median        uq
 fn_combn(1:1000) 217.82097 280.46209 276.27574 282.08087 284.55206
  fn_grid(1:1000)  28.54493  36.34848  42.82934  38.85642  40.54538
      max neval
 353.2256   100
 116.8112   100&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="use-case-mapply-and-vapply"&gt;Use case: mapply() and vapply()&lt;/h3&gt;
&lt;p&gt;This type of output is suitable for feeding into functions such as mapply() or vapply().&lt;/p&gt;
&lt;p&gt;A standard use for mapply is when multiple arguments have to be mapped into a function. Here ‘simplify = FALSE’ is set to have mapply return a list, and fed into do.call() with c() to create a vector. This is a safer and more performant method to create a vector than relying on the built-in simplification.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;do.call(c, mapply(function(x, y) paste0(x, &amp;quot;&amp;amp;&amp;quot;, y), 
                  grid2[1, ], grid2[2, ],
                  SIMPLIFY = FALSE, USE.NAMES = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] &amp;quot;a&amp;amp;b&amp;quot; &amp;quot;a&amp;amp;c&amp;quot; &amp;quot;a&amp;amp;d&amp;quot; &amp;quot;a&amp;amp;e&amp;quot; &amp;quot;a&amp;amp;f&amp;quot; &amp;quot;a&amp;amp;g&amp;quot; &amp;quot;a&amp;amp;h&amp;quot; &amp;quot;b&amp;amp;c&amp;quot; &amp;quot;b&amp;amp;d&amp;quot; &amp;quot;b&amp;amp;e&amp;quot; &amp;quot;b&amp;amp;f&amp;quot;
[12] &amp;quot;b&amp;amp;g&amp;quot; &amp;quot;b&amp;amp;h&amp;quot; &amp;quot;c&amp;amp;d&amp;quot; &amp;quot;c&amp;amp;e&amp;quot; &amp;quot;c&amp;amp;f&amp;quot; &amp;quot;c&amp;amp;g&amp;quot; &amp;quot;c&amp;amp;h&amp;quot; &amp;quot;d&amp;amp;e&amp;quot; &amp;quot;d&amp;amp;f&amp;quot; &amp;quot;d&amp;amp;g&amp;quot; &amp;quot;d&amp;amp;h&amp;quot;
[23] &amp;quot;e&amp;amp;f&amp;quot; &amp;quot;e&amp;amp;g&amp;quot; &amp;quot;e&amp;amp;h&amp;quot; &amp;quot;f&amp;amp;g&amp;quot; &amp;quot;f&amp;amp;h&amp;quot; &amp;quot;g&amp;amp;h&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An equivalent example using vapply() is given below. vapply() is also a safe choice for programming as an output template is explicitly specified, here ‘character(1L)’, hence the returned values are all expected to be of type ‘character’ of length ‘1’ otherwise an error is thrown.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;vapply(seq_along(grid2[1L, ]),
       function(i) paste0(grid2[1L, i], &amp;quot;&amp;amp;&amp;quot;, grid2[2L, i]),
       character(1L), USE.NAMES = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] &amp;quot;a&amp;amp;b&amp;quot; &amp;quot;a&amp;amp;c&amp;quot; &amp;quot;a&amp;amp;d&amp;quot; &amp;quot;a&amp;amp;e&amp;quot; &amp;quot;a&amp;amp;f&amp;quot; &amp;quot;a&amp;amp;g&amp;quot; &amp;quot;a&amp;amp;h&amp;quot; &amp;quot;b&amp;amp;c&amp;quot; &amp;quot;b&amp;amp;d&amp;quot; &amp;quot;b&amp;amp;e&amp;quot; &amp;quot;b&amp;amp;f&amp;quot;
[12] &amp;quot;b&amp;amp;g&amp;quot; &amp;quot;b&amp;amp;h&amp;quot; &amp;quot;c&amp;amp;d&amp;quot; &amp;quot;c&amp;amp;e&amp;quot; &amp;quot;c&amp;amp;f&amp;quot; &amp;quot;c&amp;amp;g&amp;quot; &amp;quot;c&amp;amp;h&amp;quot; &amp;quot;d&amp;amp;e&amp;quot; &amp;quot;d&amp;amp;f&amp;quot; &amp;quot;d&amp;amp;g&amp;quot; &amp;quot;d&amp;amp;h&amp;quot;
[23] &amp;quot;e&amp;amp;f&amp;quot; &amp;quot;e&amp;amp;g&amp;quot; &amp;quot;e&amp;amp;h&amp;quot; &amp;quot;f&amp;amp;g&amp;quot; &amp;quot;f&amp;amp;h&amp;quot; &amp;quot;g&amp;amp;h&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of the two however, mapply() is marginally faster and should normally be used when iteration is required over multiple arguments.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Gao, C. (2021), &lt;em&gt;ichimoku: Visualization and Tools for Ichimoku Kinko Hyo Strategies&lt;/em&gt;. R package version 1.0.0, &lt;a href="https://CRAN.R-project.org/package=ichimoku" class="uri"&gt;https://CRAN.R-project.org/package=ichimoku&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>339b1ddc10a121952629225b8ac6f82e</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/10-combinations</guid>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/10-combinations/combinations_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Efficient R: do.call / lapply</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/09-docall-lapply</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/09-docall-lapply/docall-lapply_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 2074954df14cc65b017b3e9d4b291353151672d450f2b623acc2a5d253767e42&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="use-case"&gt;Use case&lt;/h3&gt;
&lt;p&gt;The use of the do.call / lapply() combination is a powerful way to leverage functional programming in R. In short, you write a function that performs some actions and apply it to a list of inputs, which can then be fed into a function that combines everything into a single object.&lt;/p&gt;
&lt;p&gt;Let us take an example, where we would like to calculate the ichimoku clouds for a selection of the major world stock indices, but also preserve the volume data, all in one tidy object.&lt;/p&gt;
&lt;p&gt;We use the ‘ichimoku’ package&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; which not only draws the ichimoku clouds, but also provides an interface to the OANDA fxTrade API which is a rich source of high-quality financial data (free but requires registration).&lt;/p&gt;
&lt;h3 id="setup"&gt;Setup&lt;/h3&gt;
&lt;p&gt;We could set it up as per the below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tickers: a vector defining the stock symbols in our portfolio&lt;/li&gt;
&lt;li&gt;process(): a function that generates a row in a data frame or matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)

tickers &amp;lt;- c(&amp;quot;DE30_EUR&amp;quot;, &amp;quot;JP225_USD&amp;quot;, &amp;quot;SPX500_USD&amp;quot;, &amp;quot;UK100_GBP&amp;quot;)

process &amp;lt;- function(x, from, to) {
  # Use ichimoku::oanda() to retrieve data from the OANDA fxTrade API
  pxdata &amp;lt;- oanda(x, from = from, to = to)
  # Extract volume column
  volume &amp;lt;- pxdata$volume
  # Calculate the cloud by calling ichimoku::ichimoku()
  cloud &amp;lt;- ichimoku(pxdata, ticker = x)
  # Return a list of ticker, ichimoku cloud object, volume data
  list(x, cloud, volume)
}&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Note: the original pricing data is preserved within the ichimoku object.
&lt;/aside&gt;
&lt;p&gt;We now want to apply our function to each element of ‘tickers’ in turn, and then for the results to be combined.&lt;/p&gt;
&lt;h3 id="loop"&gt;Loop&lt;/h3&gt;
&lt;p&gt;One way to achieve this would be to iterate over ‘tickers’ using a loop:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Define a list to contain the loop output, specifying the length in advance as good practice
portfolio &amp;lt;- vector(mode = &amp;quot;list&amp;quot;, length = length(tickers))

# Loop over each element in &amp;#39;tickers&amp;#39; and save in pre-defined list
for (i in seq_along(tickers)) {
  portfolio[[i]] &amp;lt;- process(tickers[i], from = &amp;quot;2015-09-03&amp;quot;, to = &amp;quot;2016-06-30&amp;quot;)
}

# Create output matrix by calling rbind on each element of the list
portfolio &amp;lt;- do.call(rbind, portfolio)

portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]         [,2]          [,3]       
[1,] &amp;quot;DE30_EUR&amp;quot;   ichimoku,2808 integer,209
[2,] &amp;quot;JP225_USD&amp;quot;  ichimoku,2856 integer,213
[3,] &amp;quot;SPX500_USD&amp;quot; ichimoku,2856 integer,213
[4,] &amp;quot;UK100_GBP&amp;quot;  ichimoku,2808 integer,209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach takes 3-4 lines of code.&lt;/p&gt;
&lt;p&gt;Furthermore, ‘i’ remains as a leftover object in the global environment.&lt;/p&gt;
&lt;p&gt;Somewhat messy.&lt;/p&gt;
&lt;h3 id="do.call-lapply"&gt;do.call / lapply&lt;/h3&gt;
&lt;p&gt;Instead we can use a do.call / lapply() combination to achieve the same result in one line:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;portfolio &amp;lt;- do.call(rbind, lapply(tickers, process, from = &amp;quot;2015-09-03&amp;quot;, to = &amp;quot;2016-06-30&amp;quot;))

portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]         [,2]          [,3]       
[1,] &amp;quot;DE30_EUR&amp;quot;   ichimoku,2808 integer,209
[2,] &amp;quot;JP225_USD&amp;quot;  ichimoku,2856 integer,213
[3,] &amp;quot;SPX500_USD&amp;quot; ichimoku,2856 integer,213
[4,] &amp;quot;UK100_GBP&amp;quot;  ichimoku,2808 integer,209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are also no intermediate objects generated that clutter the global environment.&lt;/p&gt;
&lt;p&gt;To explain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First lapply() applies to a list or list-like object (‘tickers’), a function (‘process’). The arguments to the function are supplied immediately afterwards. lapply always returns a list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This can then be fed into do.call(), which calls a function (‘rbind’) on a list of arguments (the output of ‘lapply’, which is a list). This creates a matrix.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The use of do.call / lapply() provides for a far more succinct and distinctive coding style.&lt;/p&gt;
&lt;p&gt;The added bonus is that of the ‘apply’ family of functions, lapply() is almost always the fastest and most performant as the output type is fixed and it does not try to do things with names or simplify the output structure.&lt;/p&gt;
&lt;p&gt;For a more structured format rather than a list, lapply() can be fed into a do.call() with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c() to form a vector&lt;/li&gt;
&lt;li&gt;cbind() or rbind() to form a matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The use of this type of combination is of particular benefit in programming where both performance and predictability of output types is paramount.&lt;/p&gt;
&lt;h3 id="tidy-data-output"&gt;Tidy data output&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     [,1]         [,2]          [,3]       
[1,] &amp;quot;DE30_EUR&amp;quot;   ichimoku,2808 integer,209
[2,] &amp;quot;JP225_USD&amp;quot;  ichimoku,2856 integer,213
[3,] &amp;quot;SPX500_USD&amp;quot; ichimoku,2856 integer,213
[4,] &amp;quot;UK100_GBP&amp;quot;  ichimoku,2808 integer,209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‘portfolio’ is a tidy matrix with a row for each ticker, and a column for each data type.&lt;/p&gt;
&lt;p&gt;We can easily access any element of the matrix by specifying its index value, for example the ichimoku object for the S&amp;amp;P 500 Index by [3,2]. In the example below we run autostrat() on this object:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;autostrat(portfolio[3, 2][[1]], n = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                       [,1]               
Strategy               &amp;quot;cloudT &amp;gt; kijun&amp;quot;   
---------------------  &amp;quot;----------&amp;quot;       
Strategy cuml return % 7.76               
Per period mean ret %  0.0554             
Periods in market      74                 
Total trades           3                  
Average trade length   24.67              
Trade success %        100                
Worst trade ret %      0.81               
---------------------  &amp;quot;----------&amp;quot;       
Benchmark cuml ret %   3.7                
Per period mean ret %  0.0269             
Periods in market      135                
---------------------  &amp;quot;----------&amp;quot;       
Direction              &amp;quot;long&amp;quot;             
Start                  2015-12-21 22:00:00
End                    2016-06-29 22:00:00
Ticker                 &amp;quot;SPX500_USD&amp;quot;       &lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Note: Each element of the matrix is wrapped as a list so that they are of equal length. To access the underlying object, the ichimoku object in this case, we simply extract it using [[1]].
&lt;/aside&gt;
&lt;p&gt;&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Gao, C. (2021), &lt;em&gt;ichimoku: Visualization and Tools for Ichimoku Kinko Hyo Strategies&lt;/em&gt;. R package version 1.0.0, &lt;a href="https://CRAN.R-project.org/package=ichimoku" class="uri"&gt;https://CRAN.R-project.org/package=ichimoku&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Further examples: Youngju Nielsen of Sungkyunkwan University uses do.call / lapply to good effect in her course &lt;a href="https://www.coursera.org/learn/the-fundamental-of-data-driven-investment/" class="uri"&gt;https://www.coursera.org/learn/the-fundamental-of-data-driven-investment/&lt;/a&gt;&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>3563f731b81f5c35fc591600dd3591c7</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/09-docall-lapply</guid>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/09-docall-lapply/docall-lapply_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>ichimoku</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/08-ichimoku</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 9b787ca60956d571ad9686d55815fcff38fce9d550ccb1310c0b9c11dfa8069e&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;p&gt;An implementation in R of the Ichimoku Kinkō Hyō (一目均衡表) charting system, also commonly known as ‘cloud charts’.&lt;/p&gt;
&lt;p&gt;The technique is a refinement on candlestick charting originating from Japan, now in widespread use in technical analysis worldwide. Translating to ‘one-glance equilibrium chart’, it allows the price action and market structure of financial securities to be determined ‘at-a-glance’.&lt;/p&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;Load package and sample data:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ichimoku)
TKR &amp;lt;- sample_ohlc_data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ichimoku()&lt;/code&gt; to generate the ichimoku object:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cloud &amp;lt;- ichimoku(TKR)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;iplot()&lt;/code&gt; for fully-interactive cloud charts:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;iplot(cloud)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt = "ichimoku iplot" src="https://shikokuchuo.net/posts/08-ichimoku/img/iplot.png" width="700" height="600" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;plot()&lt;/code&gt; for production-quality static cloud charts:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(cloud, window = &amp;quot;2020-04/&amp;quot;, theme = &amp;quot;solarized&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(cloud, window = &amp;quot;2020-04/&amp;quot;, theme = &amp;quot;dark&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-2.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(cloud, window = &amp;quot;2020-04/&amp;quot;, theme = &amp;quot;mono&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/plot-3.png" width="672" /&gt;&lt;/p&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install the released version of ichimoku from CRAN:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;ichimoku&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or the latest development version from rOpenSci R-universe binaries:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;ichimoku&amp;quot;, repos = &amp;quot;https://shikokuchuo.r-universe.dev&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or the latest development version from the Github source:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;devtools::install_github(&amp;quot;shikokuchuo/ichimoku&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="package-site"&gt;Package site&lt;/h3&gt;
&lt;p&gt;Hosted ourselves at: &lt;a href="https://shikokuchuo.net/ichimoku/" class="uri"&gt;https://shikokuchuo.net/ichimoku/&lt;/a&gt; &lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ichimoku-kinko-hyo"&gt;Ichimoku Kinko Hyo &lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The system consists of the following chart lines added to a candlestick chart:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;転換線 &lt;strong&gt;Tenkan-sen&lt;/strong&gt; [conversion line]: the mid-point of the highest high and lowest low for the past 9 periods &lt;em&gt;(including the current period)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基準線 &lt;strong&gt;Kijun-sen&lt;/strong&gt; [base line]: the mid-point of the highest high and lowest low for the past 26 periods &lt;em&gt;(including the current period)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先行スパン1 &lt;strong&gt;Senkou span A&lt;/strong&gt; [leading span A]: the mid-point of Tenkan-sen and Kijun-sen plotted ahead 26 periods &lt;em&gt;(including the current period)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先行スパン2 &lt;strong&gt;Senkou span B&lt;/strong&gt; [leading span B]: the mid-point of the highest high and lowest low for the past 52 periods &lt;em&gt;(including the current period)&lt;/em&gt;, plotted ahead 26 periods &lt;em&gt;(including the current period)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遅行スパン &lt;strong&gt;Chikou span&lt;/strong&gt; [lagging span]: the current period closing price plotted behind 26 periods &lt;em&gt;(including the current period)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The 雲 &lt;strong&gt;kumo&lt;/strong&gt; [cloud] is the area bounded by Senkou span A and Senkou span B (usually shaded on a chart).&lt;/p&gt;
&lt;h3 id="interpretation"&gt;Interpretation&lt;/h3&gt;
&lt;p&gt;Ichimoku Kinkō Hyō can be translated as ‘one-glance equilibrium chart’. It is designed to allow the price action and market structure of financial securities to be determined ‘at-a-glance’ in a highly visual fashion.&lt;/p&gt;
&lt;p&gt;For example in a strongly upwards-trending market, the candlesticks will be above the Tenkan-sen, which will be above the Kijun-sen, which will be above the cloud, and the Chikou span may not have anything above it.&lt;/p&gt;
&lt;p&gt;The lines and the cloud represent dynamic support and resistance zones relative to the price candles. Generally the thicker the cloud, the tougher the support/resistance. In our previous example, if the price now reverts downwards, it can expect support first at the Kijun-sen, then the Tenkan-sen and finally the cloud itself.&lt;/p&gt;
&lt;p&gt;More subtle interpretations involve the Chikou span in particular and its action in relation to the cloud lines as well as the candles.&lt;/p&gt;
&lt;h3 id="context"&gt;Context&lt;/h3&gt;
&lt;p&gt;Ichimoku analysis is the latest refinement in candlestick charting techniques, which also originated from Japan back in the 18th century. Actually developed during the mid-20th century, it gained popularity especially from the late 1990s onward, and is now used on trading floors worldwide.&lt;/p&gt;
&lt;p&gt;The time periods have traditionally been calculated as 9, 26 and 52 based on manual data analysis performed in Japan in a pre-computer age where there was a 6-day working week resulting in 26 average trading days in a month. Although this bears little relevance to the current day, the use of these time periods has persisted as an ‘industry norm’ or ‘accepted practice’.&lt;/p&gt;
&lt;p&gt;To use other periods would be meaningless in a sense as everyone uses these parameters and ‘market psychology’ can and often does create its own realities, independent of any fundamentals. However, there is no reason for the technique not to evolve, and to reflect changing trading realities perhaps other parameters will become more relevant in the collective psychology.&lt;/p&gt;
&lt;p&gt;Finally, the use originated with daily candlesticks, and the most valid interpretation remains for daily data. However, it is equally used today for both shorter intra-day, e.g. 4-hour or hourly, and longer, e.g. weekly or monthly, charts.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Gao, C. (2021), &lt;em&gt;ichimoku: Visualization and Tools for Ichimoku Kinko Hyo Strategies&lt;/em&gt;. R package version 1.0.0, &lt;a href="https://CRAN.R-project.org/package=ichimoku" class="uri"&gt;https://CRAN.R-project.org/package=ichimoku&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Sasaki, H. 佐々木 英信 (1996), &lt;em&gt;一目均衡表の研究 [ichimoku kinkouhyou no kenkyuu]&lt;/em&gt;. Tokyo, Japan: Toushi Radar.&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>145ec97fdc99d17783fe168566130da8</distill:md5>
      <category>R</category>
      <category>Quantitative Finance</category>
      <guid>https://shikokuchuo.net/posts/08-ichimoku</guid>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/08-ichimoku/ichimoku_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Resources for learning</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/07-learning</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/07-learning/learning_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 deebda75318682cfdc1bb7fe67d313e387a27754afc8edabf60d4fd812495dfb&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo &lt;br /&gt; Iyo Mishima station
&lt;/aside&gt;
&lt;h3 id="coursera-specializations"&gt;Coursera Specializations&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(magrittr)
tibble::tribble(
  ~Institution, ~`Course or Specialization`, ~URL,
  &amp;quot;Duke University&amp;quot;, &amp;quot;Statistics with R&amp;quot;, &amp;quot;https://www.coursera.org/specializations/statistics&amp;quot;,
  &amp;quot;Duke University&amp;quot;, &amp;quot;Entrepreneurial Finance: Strategy and Innovation&amp;quot;, &amp;quot;https://www.coursera.org/specializations/entrepreneurial-finance&amp;quot;,
  &amp;quot;John Hopkins University&amp;quot;, &amp;quot;Mastering Software Development in R&amp;quot;, &amp;quot;https://www.coursera.org/specializations/r&amp;quot;,
  &amp;quot;Sung Kyun Kwan University&amp;quot;, &amp;quot;The Fundamentals of Data Driven Investment&amp;quot; ,&amp;quot;https://www.coursera.org/learn/the-fundamental-of-data-driven-investment&amp;quot;
) %&amp;gt;%
  dplyr::mutate(URL = purrr::map_chr(URL, ~paste0(&amp;quot;&amp;lt;a href=&amp;#39;&amp;quot;, .x, &amp;quot;&amp;#39;&amp;gt;&amp;quot;, .x, &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;))) %&amp;gt;%
  DT::datatable(escape = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div id="htmlwidget-1f91009e7f592301d7e3" style="width:100%;height:auto;" class="datatables html-widget"&gt;&lt;/div&gt;
&lt;script type="application/json" data-for="htmlwidget-1f91009e7f592301d7e3"&gt;{"x":{"filter":"none","data":[["1","2","3","4"],["Duke University","Duke University","John Hopkins University","Sung Kyun Kwan University"],["Statistics with R","Entrepreneurial Finance: Strategy and Innovation","Mastering Software Development in R","The Fundamentals of Data Driven Investment"],["&lt;a href='https://www.coursera.org/specializations/statistics'&gt;https://www.coursera.org/specializations/statistics&lt;\/a&gt;","&lt;a href='https://www.coursera.org/specializations/entrepreneurial-finance'&gt;https://www.coursera.org/specializations/entrepreneurial-finance&lt;\/a&gt;","&lt;a href='https://www.coursera.org/specializations/r'&gt;https://www.coursera.org/specializations/r&lt;\/a&gt;","&lt;a href='https://www.coursera.org/learn/the-fundamental-of-data-driven-investment'&gt;https://www.coursera.org/learn/the-fundamental-of-data-driven-investment&lt;\/a&gt;"]],"container":"&lt;table class=\"display\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt; &lt;\/th&gt;\n      &lt;th&gt;Institution&lt;\/th&gt;\n      &lt;th&gt;Course or Specialization&lt;\/th&gt;\n      &lt;th&gt;URL&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;","options":{"order":[],"autoWidth":false,"orderClasses":false,"columnDefs":[{"orderable":false,"targets":0}]}},"evals":[],"jsHooks":[]}&lt;/script&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>d102699385cdf42e7b669964c6754bb9</distill:md5>
      <category>Resources</category>
      <category>Learning</category>
      <guid>https://shikokuchuo.net/posts/07-learning</guid>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/07-learning/learning_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Datasets</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/06-datasets</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/06-datasets/datasets_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 1124bc02f0f74585e8f434a918970cf6671530e263eff4f1aa330a2b54c93873&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="datasets"&gt;Datasets&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(magrittr)
tibble::tribble(
  ~Source, ~URL, ~Package,
  &amp;quot;Fred&amp;quot;, &amp;quot;https://fred.stlouisfed.org/&amp;quot;, &amp;quot;Quantmod&amp;quot;,
  &amp;quot;Quandl&amp;quot;, &amp;quot;https://www.quandl.com/&amp;quot;, &amp;quot;Quandl&amp;quot;,
  &amp;quot;Yahoo Finance&amp;quot;, &amp;quot;https://finance.yahoo.com/&amp;quot;, &amp;quot;Quantmod&amp;quot;,
  &amp;quot;Damodaran NYU Stern&amp;quot;, &amp;quot;http://people.stern.nyu.edu/adamodar/New_Home_Page/datacurrent.html&amp;quot;, &amp;quot;&amp;quot;,
  &amp;quot;UCI Machine Learning Repository&amp;quot;, &amp;quot;https://archive.ics.uci.edu/ml/index.php&amp;quot;, &amp;quot;&amp;quot;,
  &amp;quot;Project Gutenberg&amp;quot;, &amp;quot;https://www.gutenberg.org/&amp;quot;, &amp;quot;gutenbergr&amp;quot;
) %&amp;gt;%
  dplyr::mutate(URL = purrr::map_chr(URL, ~paste0(&amp;quot;&amp;lt;a href=&amp;#39;&amp;quot;, .x, &amp;quot;&amp;#39;&amp;gt;&amp;quot;, .x, &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;))) %&amp;gt;%
  DT::datatable(escape = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div id="htmlwidget-93df0b3171d50d40926a" style="width:100%;height:auto;" class="datatables html-widget"&gt;&lt;/div&gt;
&lt;script type="application/json" data-for="htmlwidget-93df0b3171d50d40926a"&gt;{"x":{"filter":"none","data":[["1","2","3","4","5","6"],["Fred","Quandl","Yahoo Finance","Damodaran NYU Stern","UCI Machine Learning Repository","Project Gutenberg"],["&lt;a href='https://fred.stlouisfed.org/'&gt;https://fred.stlouisfed.org/&lt;\/a&gt;","&lt;a href='https://www.quandl.com/'&gt;https://www.quandl.com/&lt;\/a&gt;","&lt;a href='https://finance.yahoo.com/'&gt;https://finance.yahoo.com/&lt;\/a&gt;","&lt;a href='http://people.stern.nyu.edu/adamodar/New_Home_Page/datacurrent.html'&gt;http://people.stern.nyu.edu/adamodar/New_Home_Page/datacurrent.html&lt;\/a&gt;","&lt;a href='https://archive.ics.uci.edu/ml/index.php'&gt;https://archive.ics.uci.edu/ml/index.php&lt;\/a&gt;","&lt;a href='https://www.gutenberg.org/'&gt;https://www.gutenberg.org/&lt;\/a&gt;"],["Quantmod","Quandl","Quantmod","","","gutenbergr"]],"container":"&lt;table class=\"display\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt; &lt;\/th&gt;\n      &lt;th&gt;Source&lt;\/th&gt;\n      &lt;th&gt;URL&lt;\/th&gt;\n      &lt;th&gt;Package&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;","options":{"order":[],"autoWidth":false,"orderClasses":false,"columnDefs":[{"orderable":false,"targets":0}]}},"evals":[],"jsHooks":[]}&lt;/script&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>ab82faa436adf5e30180e707d2ae8b7e</distill:md5>
      <category>Resources</category>
      <category>Data</category>
      <guid>https://shikokuchuo.net/posts/06-datasets</guid>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/06-datasets/datasets_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Distill for R Markdown</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/04-distill</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/04-distill/distill_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 db79682f8bee39d7ed9231200fd076ebed92a4471a9f3ce611d0a5a28bb984a3&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="created-using-distill"&gt;Created using Distill&lt;/h3&gt;
&lt;p&gt;This website was created using &lt;a href="https://pkgs.rstudio.com/distill/"&gt;Distill&lt;/a&gt; for R Markdown, a web publishing format optimised for scientific and technical communication.&lt;/p&gt;
&lt;h3 id="key-advantages"&gt;Key advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R markdown to run R code (and all the possibility that brings)&lt;/li&gt;
&lt;li&gt;Use markdown / html interchangeably&lt;/li&gt;
&lt;li&gt;No dependency on Hugo or Jekyll, so no lock-in or need to maintain those stacks&lt;/li&gt;
&lt;li&gt;Out-of-the-box support for mobile&lt;/li&gt;
&lt;li&gt;Clean and attractive defaults&lt;/li&gt;
&lt;li&gt;Mainly “just works”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install release version of Distill from CRAN:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;distill&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="distill-blog-hosted-on-github-pages-step-by-step-instructions"&gt;Distill blog hosted on Github Pages step-by-step instructions&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Create a new blog at /blog of your current working directory in R:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;distill::create_blog(dir = &amp;quot;blog&amp;quot;, title = &amp;quot;My New Blog&amp;quot;, gh_pages = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Make some inital changes to _site.yml. Select the ‘build’ tab in RStudio and hit ‘Build Website’. This will generate the website. &lt;br /&gt;&lt;br /&gt; &lt;strong&gt;Note: building the website does not generate blog posts.&lt;/strong&gt; Each time the website is re-built, only the .Rmd files in the base directory will be automatically re-generated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modify the yaml front matter and content of the example blog post. Then hit ‘Knit’ in RStudio to generate the post. &lt;br /&gt;&lt;br /&gt; &lt;strong&gt;Note: after every change made to posts or after creating a new post, you must knit each post separately.&lt;/strong&gt; The listings page is then automatically updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create README.md, license.txt and CNAME if using a customm domain.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;README.md and license.txt are optional but usual practice. CNAME is a single line text file containing the domain name.&lt;/p&gt;
&lt;/aside&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new repository at &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To set up git and add your new repository as a remote, bring up the command line, cd to your new blog directory and:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial commit&amp;quot;
git branch -M main
git remote add origin git@github.com:username/nameofnew.git
git push -u origin main&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Replace ‘username/nameofnew.git’ as appropriate.
&lt;/aside&gt;
&lt;ol start="7" style="list-style-type: decimal"&gt;
&lt;li&gt;At Github, under your new repository, go to Settings &amp;gt;&amp;gt; Pages, set your source branch to ‘main’, and folder to ‘docs’.&lt;br /&gt; Tick ‘Enforce HTTPS’ (recommended). &lt;br /&gt; If using a custom domain name, it should be configured automatically if you have previously set up your DNS settings to point to Github’s servers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congratulations, your new website should now be online!&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;p&gt;The Distill Reference: &lt;a href="https://rstudio.github.io/distill/" class="uri"&gt;https://rstudio.github.io/distill/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Definitive R Markdown Guide: &lt;a href="https://bookdown.org/yihui/rmarkdown/" class="uri"&gt;https://bookdown.org/yihui/rmarkdown/&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>61c582762e7772959d596590830ef341</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/04-distill</guid>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/04-distill/distill_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Github Actions with R</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/05-ghactions</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/05-ghactions/ghactions_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 6f5b37d9b73dcd70f3c8b68eabbe00c4a709f2a3e694d964121af145105f1655&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="github-actions-with-r"&gt;Github Actions with R&lt;/h3&gt;
&lt;p&gt;Set up a cron job to run your R scripts at specified times.&lt;/p&gt;
&lt;p&gt;Enabled with a simple yaml configuration file.&lt;/p&gt;
&lt;p&gt;Save the following as main.yml in .github/workflows of your Github repository:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;name: Action
on:
  schedule:
    - cron: &amp;#39;30 22 * * 1-5&amp;#39;
jobs:
  render:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up R
        uses: r-lib/actions/setup-r@v1
      - name: Install dependencies
        run: |
          install.packages(c(&amp;quot;magrittr&amp;quot;, &amp;quot;purrr&amp;quot;), type = &amp;quot;win.binary&amp;quot;)
        shell: Rscript {0}
      - name: Script
        run: Rscript nameofscript.R
      - name: Commit files
        run: |
          git config --local user.name github-actions
          git config --local user.email &amp;quot;actions@github.com&amp;quot;
          git add docs/*
          git commit -am &amp;quot;commit on $(date)&amp;quot;
          git push origin main
        env:
          REPO_KEY: ${{secrets.GITHUB_TOKEN}}
          username: github-actions&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;This example cron job runs every Mon-Fri at 22.30.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customize your R packages to install.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to change nameofscript.R to your actual script name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assumes your script writes files to the ‘docs’ directory, change if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assumes your repository branch is ‘main’, change if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that this script is run on a Windows VM using Windows R binary packages. This is currently much faster than building a lot of dependencies on Linux (which is also prone to failure).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;
&lt;p&gt;To generate R Markdown documents (or for that matter render a Distill website), you will want to add the following step after ‘Set up R’:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v1&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="reference"&gt;Reference&lt;/h3&gt;
&lt;p&gt;The Github Actions with R reference: &lt;br /&gt; &lt;a href="https://orchid00.github.io/actions_sandbox/" class="uri"&gt;https://orchid00.github.io/actions_sandbox/&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>71390ff6a8bfac1c6175f4a4d31f7c2f</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/05-ghactions</guid>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/05-ghactions/ghactions_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>R | Selenium</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/03-rselenium</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/03-rselenium/rselenium_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 809e2e2a3967742faea6f9e11e0a4c533511f9710ac41812dcbcae3c78913cac&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="use-case"&gt;Use case&lt;/h3&gt;
&lt;p&gt;Whenever you need to programmatically drive a web browser.&lt;/p&gt;
&lt;p&gt;Most often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to scrape information behind a login screen&lt;/li&gt;
&lt;li&gt;when the http server does not return a simple html document&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="initial-setup"&gt;Initial setup&lt;/h3&gt;
&lt;p&gt;Prerequisites: JRE or JDK installed on your system, Mozilla Firefox&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Install the &lt;a href="https://github.com/ropensci/RSelenium"&gt;RSelenium&lt;/a&gt; package from CRAN:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;RSelenium&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;Go to &lt;a href="https://selenium-release.storage.googleapis.com/index.html" class="uri"&gt;https://selenium-release.storage.googleapis.com/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Download selenium-server-standalone-4.0.0-alpha-2.jar (or whatever is the latest ‘selenium-server-standalone’ file)&lt;/p&gt;
&lt;ol start="3" style="list-style-type: decimal"&gt;
&lt;li&gt;Go to &lt;a href="https://github.com/mozilla/geckodriver" class="uri"&gt;https://github.com/mozilla/geckodriver&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Download the latest Mozilla geckodriver release, and place in same directory as the jar file&lt;/p&gt;
&lt;h3 id="running-selenium-webdriver"&gt;Running Selenium Webdriver&lt;/h3&gt;
&lt;p&gt;At the terminal, first cd to the directory where your two new files are saved, then run:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;java -jar selenium-server-standalone-4.0.0-alpha-2.jar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The selenium server must be up and running before attempting to execute the R code below.&lt;/p&gt;
&lt;h3 id="rselenium-quickstart-code"&gt;RSelenium quickstart code&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(RSelenium)
library(keyring)
library(rvest)
library(magrittr)

# Start Selenium Session
remDr &amp;lt;- remoteDriver(
  remoteServerAddr = &amp;quot;localhost&amp;quot;,
  port = 4444L,
  browserName = &amp;quot;firefox&amp;quot;
)

remDr$open()

# Navigate to login page
remDr$navigate(&amp;quot;https://website.com/login&amp;quot;)
Sys.sleep(5) # Give page time to load

# Find &amp;#39;username&amp;#39; element and send &amp;#39;saved_user&amp;#39; as input
webElem1 &amp;lt;- remDr$findElement(using = &amp;quot;xpath&amp;quot;, &amp;quot;//input[@name = &amp;#39;username&amp;#39;]&amp;quot;)
webElem1$sendKeysToElement(list(key_get(&amp;quot;saved_user&amp;quot;)))

# Find &amp;#39;password&amp;#39; element and send &amp;#39;saved_pass&amp;#39; and &amp;#39;enter&amp;#39; keystroke as input
webElem2 &amp;lt;- remDr$findElement(using = &amp;quot;xpath&amp;quot;, &amp;quot;//input[@name = &amp;#39;password&amp;#39;]&amp;quot;)
webElem2$sendKeysToElement(list(key_get(&amp;quot;saved_pass&amp;quot;), key = &amp;quot;enter&amp;quot;))
Sys.sleep(5) # Give page time to load

# Navigate to desired page and download source
remDr$navigate(&amp;quot;https://website.com/somepage&amp;quot;)
Sys.sleep(5) # Give page time to load
html &amp;lt;- remDr$getPageSource()[[1]] %&amp;gt;% read_html()

# Use further rvest commands to extract required data
# ...

# End Selenium Session
remDr$close()&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Customise the URLs as required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customise the xpath to locate the desired input fields as they are actually named on your site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‘saved_user’ and ‘saved_pass’ are values already stored using the &lt;a href="https://github.com/r-lib/keyring"&gt;keyring&lt;/a&gt; package and retrieved here using the ‘key_get’ command. It is never a good idea to store plain text credentials in an R script.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;
&lt;h3 id="reference"&gt;Reference&lt;/h3&gt;
&lt;p&gt;Basic vignette: &lt;a href="https://docs.ropensci.org/RSelenium/articles/basics.html" class="uri"&gt;https://docs.ropensci.org/RSelenium/articles/basics.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>d59557b944f69af2a61821c12a30bf46</distill:md5>
      <category>R</category>
      <guid>https://shikokuchuo.net/posts/03-rselenium</guid>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/03-rselenium/rselenium_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Resources for global sustainability</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/02-resources</link>
      <description>


&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/02-resources/resources_files/figure-html5/index-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 3018cd1a5f671835e3116c2e2c6f937cf335b630cecc7de5d59b4059cff16999&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Dawn over Shikokuchuo
&lt;/aside&gt;
&lt;h3 id="stockholm-resilience-center"&gt;Stockholm Resilience Center&lt;/h3&gt;
&lt;p&gt;Sustainability science for biosphere stewardship, Stockholm University&lt;/p&gt;
&lt;p&gt;Video: Our future in the Anthropocene biosphere&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/5pAONwIKor8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id="svalbard-global-seed-vault"&gt;Svalbard Global Seed Vault&lt;/h3&gt;
&lt;p&gt;Safeguarding Seeds for the Future&lt;/p&gt;
&lt;p&gt;Established and funded by the Norwegian Ministry of Agriculture and Food.&lt;/p&gt;
&lt;p&gt;Provides safe, free and long-term storage of seed duplicates from all genebanks and nations participating in the global community’s joint effort to ensure the world’s future food supply.&lt;/p&gt;
&lt;p&gt;The facility serves a humanitarian purpose and is part of the international system for conserving plant genetic diversity guided by the UN organisation for Food and Agriculture (FAO).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.seedvault.no/" class="uri"&gt;https://www.seedvault.no/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="the-national-academies-of-sciences-engineering-and-medicine"&gt;The National Academies of Sciences, Engineering, and Medicine&lt;/h3&gt;
&lt;p&gt;More than 100 leading scientists including many Nobel Prize winners issued a statement following two days of scientific deliberations at the first Nobel Prize Summit, 26-28 April 2021.&lt;/p&gt;
&lt;p&gt;Excerpts from the statement:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;Global heating and habitat loss amount to nothing less than a vast and
uncontrolled experiment on Earth’s life-support system.

Time is running out to prevent irreversible changes.

The remaining carbon budget for a 67% probability of not exceeding 1.5°C global
warming will be exhausted before 2030. 

Global sustainability offers the only viable path to human safety, equity,
health, and progress.

Humanity is waking up late to the challenges and opportunities of active
planetary stewardship. But we *are* waking up.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Full text: &lt;br /&gt; &lt;a href="https://www.nationalacademies.org/news/2021/04/nobel-prize-laureates-and-other-experts-issue-urgent-call-for-action-after-our-planet-our-future-summit" class="uri"&gt;https://www.nationalacademies.org/news/2021/04/nobel-prize-laureates-and-other-experts-issue-urgent-call-for-action-after-our-planet-our-future-summit&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="openlearn-the-open-university"&gt;Openlearn, The Open University&lt;/h3&gt;
&lt;p&gt;Greta Thunberg: A Year to change the World&lt;/p&gt;
&lt;p&gt;Encounters with some of the world’s leading scientists and economists allow the series to examine what the latest science tells us about what can be done to avert the worst effects of climate change.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.open.edu/openlearn/tv-radio-events/tv/greta-thunberg-year-change-the-world" class="uri"&gt;https://www.open.edu/openlearn/tv-radio-events/tv/greta-thunberg-year-change-the-world&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ted"&gt;TED&lt;/h3&gt;
&lt;h4 id="stephen-hawking"&gt;Stephen Hawking&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Questioning the universe&lt;/em&gt; &lt;br /&gt; TED February 2008&lt;/p&gt;
&lt;div style="max-width:854px"&gt;
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;
&lt;iframe src="https://embed.ted.com/talks/lang/en/stephen_hawking_questioning_the_universe" width="854" height="480" style="position:absolute;left:0;top:0;width:100%;height:100%" frameborder="0" scrolling="no" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;aside&gt;
Transcript: 09:06 | Stephen Hawking: I think it quite likely that we are the only civilization within several hundred light years; otherwise we would have heard radio waves. &lt;strong&gt;The alternative is that civilizations don’t last very long, but destroy themselves&lt;/strong&gt;.
&lt;/aside&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id="katharine-hayhoe"&gt;Katharine Hayhoe&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;The most important thing you can do to fight climate change: talk about it&lt;/em&gt; &lt;br /&gt; TEDWomen November 2018, also featured at useR!2021 the R conference July 2021&lt;/p&gt;
&lt;div style="max-width:854px"&gt;
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;
&lt;iframe src="https://embed.ted.com/talks/lang/en/katharine_hayhoe_the_most_important_thing_you_can_do_to_fight_climate_change_talk_about_it" width="854" height="480" style="position:absolute;left:0;top:0;width:100%;height:100%" frameborder="0" scrolling="no" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>afd14c156c887c2d76f463dc3dd28980</distill:md5>
      <category>Resources</category>
      <category>Sustainability</category>
      <guid>https://shikokuchuo.net/posts/02-resources</guid>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/02-resources/resources_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Authenticating photography using cryptographic hashing</title>
      <dc:creator>shikokuchuo</dc:creator>
      <link>https://shikokuchuo.net/posts/01-authenticating</link>
      <description>


&lt;h3 id="reproducible-r-code-and-authentification"&gt;Reproducible R code and authentification&lt;/h3&gt;
&lt;p&gt;R is an open source programming language popular amongst statisticians and data scientists. The power of the R framework is enhanced through the tens of thousands of packages contributed by the open source community that extends and enhances R. &lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The below code is a simple proof of concept of using cryptographic hashing as a method for authentification of original photographic files. The code simply retrieves the files in a certain folder and loads them into R using the imager &lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; package and plots them, here on the page, but it could easily be another output device such as writing to jpeg or pdf. At the same time, the original file is run through a sha256 cryptographic hash from the openssl &lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; package. sha256 is a one-way algorithm that takes an input and generates a hexadecimal sequence 64 long. As the input file may be arbitrarily large, it can easily be seen that the information loss in arriving at the hash precludes the possibility of going in the other direction i.e. retrieving the original data from the hash. The properties of the hashing algorithm include that small changes to the input file can result in completely different hash values. The chances of collision i.e. two different data files generating the exact same hash is vanishingly small.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;photos &amp;lt;- file.path(&amp;quot;_images&amp;quot;, list.files(&amp;quot;_images&amp;quot;))
develop &amp;lt;- function(x) {
  plot(imager::load.image(x), axes = FALSE)
  paste0(openssl::sha256(file(x)))
}
par(mar = c(0, 0, 0, 0))
data.frame(sha256 = do.call(rbind, lapply(photos, develop)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://shikokuchuo.net/posts/01-authenticating/authenticating_files/figure-html5/index-1.png" width="672" /&gt;&lt;img src="https://shikokuchuo.net/posts/01-authenticating/authenticating_files/figure-html5/index-2.png" width="672" /&gt;&lt;img src="https://shikokuchuo.net/posts/01-authenticating/authenticating_files/figure-html5/index-3.png" width="672" /&gt;&lt;img src="https://shikokuchuo.net/posts/01-authenticating/authenticating_files/figure-html5/index-4.png" width="672" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            sha256
1 cba0450d38b74f2585868d2aa026a96de735a8f73a54889366d62bbdfdcc8661
2 a63b055e11765cf36fa065be413b0bb5deb89d6cfba0c9feac7b9946e9c76ece
3 f06eb35ea2bea1166e3147d30a846069fa5fd969717185d3e27821cea9257999
4 0e6cc2bf63313153c6f3aa3206a0dc1d3eb41e6a5a570b48ea5021e437672f99&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Note: sha256 hashes are of the original files. Saving and hashing the images on this page would produce completely different hashes.
&lt;/aside&gt;
&lt;p&gt;The output image along with the sha256 hash of the original can then be published together. The photographer is then able to freely share their work, which does not then need to be downsized, degraded or watermarked, as long as the data of the original file has undergone some form of transformation (that is not trivially reversible) to produce the output. The hash is the proof of authenticity of the original, which only the original artist possesses.&lt;/p&gt;
&lt;p&gt;To prove authorship, the artist just needs to run the above function again, which would produce the same output and same hash values, and is an example of the benefits of reproducibility in writing R code.&lt;/p&gt;
&lt;h3 id="as-applied-to-a-digital-photography-workflow"&gt;As applied to a digital photography workflow&lt;/h3&gt;
&lt;p&gt;Equivalent to the example demonstrated here, the workflow of digital photographers is often to take a RAW camera file, and perform edits using photo processing software &lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;, before generating an output. Software generally keeps the RAW file intact as a form of “digital negative”, but adds the edits in a layer stored separately either as a “sidecar” file or in a database etc. depending on the software. Photographers often take the output and store a best quality version as their “master”.&lt;/p&gt;
&lt;p&gt;Our approach would differ in treating the RAW file as the “original”, which allows a high-quality output to then be published along with the sha256 of the RAW file. The artist retains the RAW file, along with the sidecar file and software that generates the output, as proof of authorship. This works of course only where the artist can ensure reproducibility of the output, and using open source software where the edits are stored transparently in a human-readable format would afford greater confidence in such a workflow.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The largest listing of packages may be found at The Comprehensive R Archive Network: &lt;a href="https://cloud.r-project.org/" class="uri"&gt;https://cloud.r-project.org/&lt;/a&gt;&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;imager R package: &lt;a href="https://dahtah.github.io/imager/" class="uri"&gt;https://dahtah.github.io/imager/&lt;/a&gt;&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;openssl R package: &lt;a href="https://github.com/jeroen/openssl" class="uri"&gt;https://github.com/jeroen/openssl&lt;/a&gt;&lt;a href="#fnref3" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;A popular example of such photo-editing software is the open source Darktable &lt;a href="https://www.darktable.org/" class="uri"&gt;https://www.darktable.org/&lt;/a&gt;&lt;a href="#fnref4" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>72e9db600f45ab361848efb0affc2c28</distill:md5>
      <category>Photography</category>
      <category>Cryptography</category>
      <guid>https://shikokuchuo.net/posts/01-authenticating</guid>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://shikokuchuo.net/posts/01-authenticating/authenticating_files/figure-html5/index-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
  </channel>
</rss>
